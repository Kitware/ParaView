<ServerManagerConfiguration>
  <ProxyGroup name="internal_sources">
    <!--  FLASH AMR Particles Reader -->
    <SourceProxy class="vtkAMRFlashParticlesReader"
                 label="FLASH Particles AMR Reader"
                 name="FlashParticlesReaderCore">
      <Documentation long_help="Reads AMR particles from FLASH dataset"
                     short_help="Reads AMR particles from FLASH dataset">The
                     Flash particles reader loads particle simulation data
                     stored in Flash format. The output of this reader is a
                     MultiBlock dataset where each block is vtkPolyData that
                     holds the particles and corresponding particle
                     data.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the Enzo file
        name</Documentation>
      </StringVectorProperty>
      <!-- Display the number of Particles -->
      <IntVectorProperty command="GetTotalNumberOfParticles"
                         information_only="1"
                         name="NumParticles">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty command="SetFrequency"
                         default_values="1"
                         name="Frequency"
                         number_of_elements="1">
        <IntRangeDomain name="range" />
        <Documentation>This property sets the frequency interval for loading
        particles.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetFilterLocation"
                         default_values="0"
                         name="FilterLocation"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Turns on filtering of particles by
        location</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetMinLocation"
                            default_values="0.0 0.0 0.0"
                            name="MinLocation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>This property sets the minimum 3-D coordinate location
        by which the particles will be filtered out.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetMaxLocation"
                            default_values="0.0 0.0 0.0"
                            name="MaxLocation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>This property sets the minimum 3-D coordinate location
        by which the particles will be filtered out.</Documentation>
      </DoubleVectorProperty>
      <!--  Array Selection GUI Component -->
      <StringVectorProperty information_only="1"
                            name="ParticleArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Particle" />
      </StringVectorProperty>
      <StringVectorProperty command="SetParticleArrayStatus"
                            element_types="2 0"
                            information_property="ParticleArrayInfo"
                            label="Particle Arrays"
                            name="ParticleArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ParticleArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which particle arrays to
        read.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="Flash flash"
                       file_description="AMR flash particles dataset" />
      </Hints>
    </SourceProxy>
    <!--  ENZO AMR Particles Reader -->
    <SourceProxy class="vtkAMREnzoParticlesReader"
                 label="Enzo Particles AMR Reader"
                 name="EnzoParticlesReaderCore">
      <Documentation long_help="Reads AMR particles from an ENZO dataset"
                     short_help="Reads AMR particles from an ENZO dataset">The
                     Enzo particles reader loads particle simulation data
                     stored in Enzo HDF5 format. The output of this reader is
                     MultiBlock dataset where each block is a vtkPolyData that
                     holds the particles (points) and corresponding particle
                     data.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the Enzo file
        name</Documentation>
      </StringVectorProperty>
      <!-- Display the number of Particles -->
      <IntVectorProperty command="GetTotalNumberOfParticles"
                         information_only="1"
                         name="NumParticles">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty command="SetFrequency"
                         default_values="1"
                         name="Frequency"
                         number_of_elements="1">
        <IntRangeDomain name="range" />
        <Documentation>This property sets the frequency interval for loading
        particles.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetFilterLocation"
                         default_values="0"
                         name="FilterLocation"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Turns on filtering of particles by
        location</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetMinLocation"
                            default_values="0.0 0.0 0.0"
                            name="MinLocation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>This property sets the minimum 3-D coordinate location
        by which the particles will be filtered out.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetMaxLocation"
                            default_values="0.0 0.0 0.0"
                            name="MaxLocation"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>This property sets the minimum 3-D coordinate location
        by which the particles will be filtered out.</Documentation>
      </DoubleVectorProperty>
      <!--  Array Selection GUI Component -->
      <StringVectorProperty information_only="1"
                            name="ParticleArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Particle" />
      </StringVectorProperty>
      <StringVectorProperty command="SetParticleArrayStatus"
                            element_types="2 0"
                            information_property="ParticleArrayInfo"
                            label="Particle Arrays"
                            name="ParticleArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ParticleArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which particle arrays to
        read.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetParticleType"
                         default_values="0"
                         name="ParticleType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="All Particles"
                 value="0" />
          <Entry text="Dark Matter"
                 value="1" />
          <Entry text="Active (Star)"
                 value="2" />
          <Entry text="Passive (Tracer)"
                 value="3" />
        </EnumerationDomain>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="boundary hierarchy"
                       file_description="Enzo AMR Particles dataset" />
      </Hints>
    </SourceProxy>
    <!-- FLASH AMR Core Reader definition -->
    <SourceProxy class="vtkAMRFlashReader"
                 label="Flash AMR Reader"
                 name="FlashReaderCore">
      <Documentation long_help="Read hierarchical box dataset from a Flash dataset."
                     short_help="Read hierarchical box dataset from a Flash dataset.">
                     This Flash reader loads data stored in Flash format. The
                     output of this reader is a hierarchical-box
                     dataset.</Documentation>
      <!-- Define Flas Filename -->
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the Flash file
        name</Documentation>
      </StringVectorProperty>
      <!-- Display the number of levels -->
      <IntVectorProperty command="GetNumberOfLevels"
                         information_only="1"
                         name="NumLevels">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <!--  Display the number of blocks -->
      <IntVectorProperty command="GetNumberOfBlocks"
                         information_only="1"
                         name="NumBlocks">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty command="SetEnableCaching"
                         default_values="0"
                         name="EnableCaching"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Turn cahcing on/off</Documentation>
      </IntVectorProperty>
      <!--  Define MaxLevel property -->
      <IntVectorProperty command="SetMaxLevel"
                         default_values="1"
                         name="Level"
                         number_of_elements="1">
        <IntRangeDomain max="100"
                        min="0"
                        name="range" />
        <Documentation>This property specifies the desired level of resolution
        that will be visible.</Documentation>
      </IntVectorProperty>
      <!--  Array Selection GUI Component -->
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="PointArrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which node-based arrays to
        read.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="Flash flash"
                       file_description="AMR Flash dataset" />
      </Hints>
    </SourceProxy>
    <!-- FLASH AMR Core Reader definition -->
    <!-- ENZO AMR Core Reader definition -->
    <SourceProxy class="vtkAMREnzoReader"
                 label="Enzo AMR Reader"
                 name="EnzoReaderCore">
      <Documentation long_help="Read hierarchical box dataset from an Enzo file."
                     short_help="Read hierarchical box dataset from an Enzo file.">
                     This Enzo reader loads data stored in Enzo format. The
                     output of this reader is a hierarchical-box
                     dataset.</Documentation>
      <!-- Define Enzo Filename -->
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the Enzo file
        name</Documentation>
      </StringVectorProperty>
      <!-- Display the number of levels -->
      <IntVectorProperty command="GetNumberOfLevels"
                         information_only="1"
                         name="NumLevels">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <!--  Display the number of blocks -->
      <IntVectorProperty command="GetNumberOfBlocks"
                         information_only="1"
                         name="NumBlocks">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty command="SetEnableCaching"
                         default_values="0"
                         name="EnableCaching"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Turn cahcing on/off</Documentation>
      </IntVectorProperty>
      <!--  Define MaxLevel property -->
      <IntVectorProperty command="SetMaxLevel"
                         default_values="1"
                         name="Level"
                         number_of_elements="1">
        <IntRangeDomain max="100"
                        min="0"
                        name="range" />
        <Documentation>This property specifies the desired level of resolution
        that will be visible.</Documentation>
      </IntVectorProperty>
      <!-- Set Conversion to CGS -->
      <IntVectorProperty command="SetConvertToCGS"
                         default_values="0"
                         name="ConvertToCGS"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property specifies whether or not units will be
        converted to CGS.</Documentation>
      </IntVectorProperty>
      <!--  Array Selection GUI Component -->
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="PointArrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which node-based arrays to
        read.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="boundary hierarchy"
                       file_description="AMR Enzo Files" />
      </Hints>
    </SourceProxy>
    <!-- END ENZO AMR Core Reader definition -->
    <SourceProxy class="vtkAVSucdReader"
                 label="AVS UCD Reader"
                 name="AVSucdReader">
      <Documentation long_help="Reads binary or ASCII files stored in AVS UCD format."
                     short_help="Read a dataset in AVS UCD format.">The AVS UCD
                     reader reads binary or ASCII files stored in AVS UCD
                     format. The default file extension is .inp. The output of
                     this reader is unstructured grid.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the AVS UCD
        reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property contains a list of the cell-centered
        arrays to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property contains a list of the point-centered
        arrays to read.</Documentation>
      </StringVectorProperty>
      <!-- End AVSucdReader -->
    </SourceProxy>
    <SourceProxy class="vtkMetaImageReader"
                 label="Meta Image reader"
                 name="MetaImageReaderCore">
      <Documentation long_help="Reads binary UNC meta image data."
                     short_help="Read UNC meta image data.">The Meta Image
                     Reader reads binary UNC meta image data, and produces
                     uniform rectilinear (image/volume) data. The default file
                     extensions are .mhd and .mha.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Meta Image
        reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="mhd mha"
                       file_description="Meta Image Data Files" />
      </Hints>
      <!-- End Meta Image Reader -->
    </SourceProxy>
    <SourceProxy class="vtkPDataSetReader"
                 label="Legacy VTK Reader"
                 name="legacyreader">
      <Documentation long_help="Reads files stored in VTK's legacy file format."
                     short_help="Read legacy VTK files.">The Legacy VTK reader
                     loads files stored in VTK's legacy file format. The
                     expected file extension is .vtk. The type of the dataset
                     may be structured grid, uniform rectilinear grid
                     (image/volume), non-uniform rectiinear grid, unstructured
                     grid, or polygonal.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Legacy VTK
        reader.</Documentation>
      </StringVectorProperty>
      <!-- End legacyreader -->
    </SourceProxy>
    <SourceProxy class="vtkXMLPolyDataReader"
                 label="XML PolyData Reader"
                 name="XMLPolyDataReaderCore">
      <Documentation long_help="Reads serial VTK XML polydata files."
                     short_help="Read VTK XML polydata files.">The XML Polydata
                     reader reads the VTK XML polydata file format. The
                     standard extension is .vtp.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK XML
        polygonal dataset reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLPolyDataReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLUnstructuredGridReader"
                 label="XML Unstructured Grid reader"
                 name="XMLUnstructuredGridReaderCore">
      <Documentation long_help="Reads serial VTK XML unstructured grid data files."
                     short_help="Read VTK XML unstructured grid data files.">
                     The XML Unstructured Grid reader reads the VTK XML
                     unstructured grid data file format. The standard extension
                     is .vtu.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK XML
        unstructured grid reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLUnstructuredGridReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLImageDataReader"
                 label="XML Image Data Reader"
                 name="XMLImageDataReaderCore">
      <Documentation long_help="Reads serial VTK XML image data files."
                     short_help="Read VTK XML image data files.">The XML Image
                     Data reader reads the VTK XML image data file format. The
                     standard extension is .vti.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK XML
        uniform rectilinear (image/volume) data reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLImageDataReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLStructuredGridReader"
                 label="XML Structured Grid Reader"
                 name="XMLStructuredGridReaderCore">
      <Documentation long_help="Reads serial VTK XML structured grid data files."
                     short_help="Read VTK XML structured grid data files.">The
                     XML Structured Grid reader reads the VTK XML structured
                     grid data file format. The standard extension is
                     .vts.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK XML
        structured grid reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLStructuredGridReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLRectilinearGridReader"
                 label="XML Rectilinear Grid Reader"
                 name="XMLRectilinearGridReaderCore">
      <Documentation long_help="Reads serial VTK XML rectilinear grid data files."
                     short_help="Read VTK XML rectilinear grid data files.">The
                     XML Rectilinear Grid reader reads the VTK XML rectilinear
                     grid data file format. The standard extension is
                     .vtr.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK XML
        non-uniform rectilinear grid reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLRectilinearGridReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLPPolyDataReader"
                 label="XML Partitioned Polydata Reader"
                 name="XMLPPolyDataReaderCore">
      <Documentation long_help="Reads the summary file and the associated VTK XML polydata files."
                     short_help="Read partitioned VTK XML polydata files.">The
                     XML Partitioned Polydata reader reads the partitioned VTK
                     polydata file format. It reads the partitioned format's
                     summary file and then the associated VTK XML polydata
                     files. The expected file extension is
                     .pvtp.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        partitioned VTK XML polygonal dataset reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLPPolyDataReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLPUnstructuredGridReader"
                 label="XML Partitioned Unstructured Grid Reader"
                 name="XMLPUnstructuredGridReaderCore">
      <Documentation long_help="Reads the summary file and the associated VTK XML unstructured grid files."
                     short_help="Read partitioned VTK XML unstructured grid files.">
                     The XML Partitioned Unstructured Grid reader reads the
                     partitioned VTK unstructured grid data file format. It
                     reads the partitioned format's summary file and then the
                     associated VTK XML unstructured grid data files. The
                     expected file extension is .pvtu.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        partitioned VTK XML unstructured grid reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLPUnstructuredGridReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLPImageDataReader"
                 label="XML Partitioned Image Data Reader"
                 name="XMLPImageDataReaderCore">
      <Documentation long_help="Reads the summary file and the associated VTK XML image data files."
                     short_help="Read partitioned VTK XML image data files.">
                     The XML Partitioned Image Data reader reads the
                     partitioned VTK image data file format. It reads the
                     partitioned format's summary file and then the associated
                     VTK XML image data files. The expected file extension is
                     .pvti.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        partitioned VTK XML uniform rectilinear grid (image/volume)
        reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This propert lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLPImageDataReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLPStructuredGridReader"
                 label="XML Partitioned Structured Grid Reader"
                 name="XMLPStructuredGridReaderCore">
      <Documentation long_help="Reads the summary file and the associated VTK XML structured grid files."
                     short_help="Read partitioned VTK XML structured grid files.">
                     The XML Partitioned Structured Grid reader reads the
                     partitioned VTK structured grid data file format. It reads
                     the partitioned format's summary file and then the
                     associated VTK XML structured grid data files. The
                     expected file extension is .pvts.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        partitioned VTK XML structured grid reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLPStructuredGridReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLPRectilinearGridReader"
                 label="XML Partitioned Rectilinear Grid Reader"
                 name="XMLPRectilinearGridReaderCore">
      <Documentation long_help="Reads the summary file and the associated VTK XML rectilinear grid files."
                     short_help="Read partitioned VTK XML rectilinear grid files.">
                     The XML Partitioned Rectilinear Grid reader reads the
                     partitioned VTK rectilinear grid file format. It reads the
                     partitioned format's summary file and then the associated
                     VTK XML rectilinear grid files. The expected file
                     extension is .pvtr.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        partitioned VTK XML non-uniform rectilinear grid
        reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <!-- End XMLPRectilinearGridReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkSTLReader"
                 label="STL Reader"
                 name="stlreadercore">
      <Documentation long_help="Reads ASCII or binary stereo lithography (STL) files."
                     short_help="Read STL files.">The STL reader reads ASCII or
                     binary stereo lithography (STL) files. The expected file
                     extension is .stl. The output of this reader is a
                     polygonal dataset.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the STL
        reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetScalarTags"
                         default_values="1"
                         name="ScalarTags"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set to true, the reader will include cell data
        describing which solid a cell belongs to.</Documentation>
      </IntVectorProperty>
      <!-- End stlreader -->
    </SourceProxy>
    <SourceProxy class="vtkDelimitedTextReader"
                 label="CSV Reader"
                 name="CSVReaderCore">
      <Documentation long_help="Reads a comma-separated values file into a 1D rectilinear grid."
                     short_help="Read a comma-separated values file.">The CSV
                     reader reads a comma-separated values file into a 1D
                     rectilinear grid. If the file was saved using the
                     CSVWriter, then the rectilinear grid's points and point
                     data can be restored as well as the cell data. Otherwise
                     all the data in the CSV file is treated as cell data. The
                     default file extension is .csv.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the CSV
        (Command Separated Values) reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetDetectNumericColumns"
                         default_values="1"
                         name="DetectNumericColumns"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When set to true, the reader will detect numeric columns
        and create vtkDoubleArray or vtkIntArray for those instead of
        vtkStringArray.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetUseStringDelimiter"
                         default_values="1"
                         name="UseStringDelimiter"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether to use the string
        delimiter.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetHaveHeaders"
                         default_values="1"
                         name="HaveHeaders"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If the value of this property is 1, treat the first line
        of the file as headers.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="SetFieldDelimiterCharacters"
                            default_values=","
                            name="FieldDelimiterCharacters"
                            number_of_elements="1">
        <Documentation>This property lists the characters that may be used to
        separate fields. For example, a value of "," indicates a
        comma-separated value file. A value of ".:;" indicates that columns may
        be separated by a period, colon or semicolon. The order of the
        characters in the text string does not matter.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetMergeConsecutiveDelimiters"
                         default_values="0"
                         name="MergeConsecutiveDelimiters"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Whether to merge successive delimiters. Use this if (for
        example) your fields are separated by spaces but you don't know exactly
        how many.</Documentation>
      </IntVectorProperty>
      <!-- End of CSVReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkXMLMultiBlockDataReader"
                 label="XML Multi-Block Data reader"
                 name="XMLMultiBlockDataReaderCore">
      <Documentation>Internal proxy used by
      XMLMultiBlockDataWriter.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK
        multi-block reader.</Documentation>
      </StringVectorProperty>
      <!-- End MultiBlockDataReader -->
    </SourceProxy>
    <SourceProxy class="vtkXMLHierarchicalBoxDataReader"
                 label="XML Hierarchical Box Data reader"
                 name="XMLHierarchicalBoxDataReaderCore">
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VTK
        hierarchical box data reader.</Documentation>
      </StringVectorProperty>
      <!-- End HierarchicalBoxDataReader -->
    </SourceProxy>

    <SourceProxy class="vtkXMLUniformGridAMRReader"
                 label="XML UniformGrid AMR reader"
                 name="XMLUniformGridAMRReaderCore">
      <IntVectorProperty command="SetMaximumLevelsToReadByDefault"
                         name="DefaultNumberOfLevels"
                         number_of_elements="1"
                         default_values="1"
                         panel_visibility="default">
        <IntRangeDomain name="range" min="0" max="10" />
        <Documentation>
          This reader supports demand-driven heavy data reading i.e. downstream
          pipeline can request specific blocks from the AMR using
          vtkCompositeDataPipeline::UPDATE_COMPOSITE_INDICES() key in
          RequestUpdateExtent() pass. However, when down-stream doesn't provide
          any specific keys, the default behavior can be setup to read at-most N
          levels by default. The number of levels read can be set using this
          method.  Set this to 0 to imply no limit. Default is 0.
        </Documentation>
      </IntVectorProperty>
      <!-- End XMLUniformGridAMRReaderCore -->
    </SourceProxy>

    <SourceProxy class="vtkSLACParticleReader"
                 label="SLAC Particle Data Reader"
                 name="SLACParticleReaderCore">
      <Documentation>The SLAC Particle data reader.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
    <!-- SLACParticleReaderCore -->
    <SourceProxy class="vtkParticleReader"
                 label="VTK Particle Reader"
                 name="ParticleReaderCore">
      <Documentation>Core for ParticleReader.</Documentation>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetDataByteOrder"
                         default_values="0"
                         name="ByteOrder"
                         number_of_elements="1">
        <Documentation>Set/Get the byte ordering of the file you are trying to
        read in.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="BigEndian"
                 value="0" />
          <Entry text="LittleEndian"
                 value="1" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetHasScalar"
                         default_values="1"
                         name="HasScalar"
                         number_of_elements="1">
        <Documentation>Default: 1. If 1 then each particle has a value
        associated with it.</Documentation>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <IntVectorProperty command="SetFileType"
                         default_values="0"
                         name="FileType"
                         number_of_elements="1">
        <Documentation>Set the file type. The options are: - Unknown (0)
        (default) the reader will attempt to determine the file type. If this
        fails then you should set the file type yourself. - Text (1) the file
        type is text. - Binary (2) the file type is binary.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Unknown"
                 value="0" />
          <Entry text="Text"
                 value="1" />
          <Entry text="Binary"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <IntVectorProperty command="SetDataType"
                         default_values="10"
                         name="DataType"
                         number_of_elements="1">
        <Documentation>Get/Set the data type. The options are: - Float (10)
        (default) single precision floating point. - Double (11) double
        precision floating point.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Float"
                 value="10" />
          <Entry text="Double"
                 value="11" />
        </EnumerationDomain>
      </IntVectorProperty>
      <!-- ParticleReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkPExodusIIReader"
                 name="ExodusIIReaderCore">
      <Documentation long_help="Reads an Exodus II file to produce an unstructured grid."
                     short_help="Read Exodus II files.">The Exodus reader loads
                     Exodus II files and produces an unstructured grid output.
                     The default file extensions are .g, .e, .ex2, .ex2v2,
                     .exo, .gen, .exoII, .exii, .0, .00, .000, and
                     .0000.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Exodus
        reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetHasModeShapes"
                         default_values="0"
                         name="HasModeShapes"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Some simulations overload the Exodus time steps to
        represent mode shapes. In this case, it does not make sense to iterate
        over the "time steps", because they are not meant to be played in
        order. Rather, each represents the vibration at a different "mode."
        Setting the value of this property to 1 changes the semantics of the
        reader to not report the time steps to downstream
        filters.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetAnimateModeShapes"
                         default_values="1"
                         label="Animate Vibrations"
                         name="AnimateVibrations"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If this flag is on and HasModeShapes is also on, then
        this reader will report a continuous time range [0,1] and animate the
        displacements in a periodic sinusoid. If this flag is off and
        HasModeShapes is on, this reader ignores time. This flag has no effect
        if HasModeShapes is off.</Documentation>
      </IntVectorProperty>
      <!-- The following two properties magically send time information -->
      <!-- to the animation panel. Usually you only need one (the former -->
      <!-- for discrete time, the latter for continuous time), but changing -->
      <!-- the HasModeShapes ivar switches between discrete and continuous -->
      <!-- time. -->
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <IntVectorProperty command="GetModeShapesRange"
                         information_only="1"
                         name="ModeShapesRangeInfo"></IntVectorProperty>
      <IntVectorProperty command="SetModeShape"
                         default_values="1"
                         name="ModeShape"
                         number_of_elements="1">
        <IntRangeDomain name="range" default_mode="min">
          <RequiredProperties>
            <Property function="Range"
                      name="ModeShapesRangeInfo" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>Specify which mode shape to animate when HasModeShapes
        is on.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty information_only="1"
                            name="EdgeBlocksInfo">
        <ArraySelectionInformationHelper attribute_name="EdgeBlock" />
      </StringVectorProperty>
      <StringVectorProperty command="SetEdgeBlockArrayStatus"
                            element_types="2 0"
                            information_property="EdgeBlockArrayInfo"
                            name="EdgeBlocks"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="EdgeBlocksInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which blocks of edges should
        be loaded. All edges in the same block will have the same interpolant
        (linear, quadratic, etc.) and have the same variables defined over
        them.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="FaceBlocksInfo">
        <ArraySelectionInformationHelper attribute_name="FaceBlock" />
      </StringVectorProperty>
      <StringVectorProperty command="SetFaceBlockArrayStatus"
                            element_types="2 0"
                            information_property="FaceBlockArrayInfo"
                            name="FaceBlocks"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="FaceBlocksInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which blocks of faces should
        be loaded. All faces in the same block will have the same interpolant
        (triangular, bilinear quadrilateral, etc.) and have the same variables
        defined over them.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="GetSILUpdateStamp"
                         information_only="1"
                         name="SILUpdateStamp">
        <SimpleIntInformationHelper />
        <Documentation>Information property indicating the update stamp of the
        SIL. Every time the SIL is rebuilt, this time stamp is
        changed.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="GetSIL"
                            information_only="1"
                            name="ElementBlocksInfo"
                            si_class="vtkSISILProperty"
                            subtree="Blocks" />
      <IdTypeVectorProperty command="GetSILUpdateStamp"
                            default_values="0"
                            information_only="1"
                            name="SILTimeStamp"
                            number_of_elements="1" />
      <StringVectorProperty command="SetElementBlockArrayStatus"
                            element_types="2 0"
                            name="ElementBlocks"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <SILDomain name="array_list"
                   subtree="Blocks">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ElementBlocksInfo" />
            <Property function="TimeStamp"
                      name="SILTimeStamp" />
          </RequiredProperties>
        </SILDomain>
        <Documentation>Use this property to select which blocks of elements
        (cells) should be loaded. All elements (cells) in the same block will
        have the same interpolant (tetrahedral, triangular, trilinear
        hexahedral, etc.) and have the same variables defined over
        them.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="GlobalVariablesInfo">
        <ArraySelectionInformationHelper attribute_name="GlobalResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetGlobalResultArrayStatus"
                            element_types="2 0"
                            information_property="GlobalVariablesInfo"
                            name="GlobalVariables"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="GlobalVariablesInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which global (i.e.,
        per-mesh) variables should be loaded. Global variables are stored as
        arrays in the field data of the reader's output.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointVariablesInfo">
        <ArraySelectionInformationHelper attribute_name="PointResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointResultArrayStatus"
                            element_types="2 0"
                            information_property="PointVariablesInfo"
                            name="PointVariables"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointVariablesInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which nodal (i.e.,
        per-point) variables should be loaded.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="EdgeVariablesInfo">
        <ArraySelectionInformationHelper attribute_name="EdgeResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetEdgeResultArrayStatus"
                            element_types="2 0"
                            information_property="EdgeVariablesInfo"
                            name="EdgeVariables"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="EdgeVariablesInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which variables defined over
        edges should be loaded. Edges are oriented boundaries of one or more
        higher-dimensional cells also present in the mesh. Edge variables
        specify a single value per entry in some edge block.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="FaceVariablesInfo">
        <ArraySelectionInformationHelper attribute_name="FaceResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetFaceResultArrayStatus"
                            element_types="2 0"
                            information_property="FaceVariablesInfo"
                            name="FaceVariables"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="FaceVariablesInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which variables defined over
        faces should be loaded. Faces are oriented boundaries of one or more
        higher-dimensional cells also present in the mesh. Face variables
        specify a single value per entry in some face block.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ElementVariablesInfo">
        <ArraySelectionInformationHelper attribute_name="ElementResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetElementResultArrayStatus"
                            element_types="2 0"
                            information_property="ElementVariablesInfo"
                            name="ElementVariables"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ElementVariablesInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Use this property to select which variables defined over
        elements (cells) should be loaded. Element variables specify a single
        value per entry in some element block.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="NodeMapInfo">
        <ArraySelectionInformationHelper attribute_name="NodeMap" />
      </StringVectorProperty>
      <StringVectorProperty command="SetNodeMapArrayStatus"
                            element_types="2 0"
                            information_property="NodeMapInfo"
                            name="NodeMapArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="NodeMapInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Specify which maps defined over nodes (points) in the
        mesh should be loaded. A node map is a renumbering of all the points in
        a file from their offset in the file to some arbitrary integers,
        usually specifying a unique global ID across a set of files. These are
        sometimes called new-style maps because they are specified differently
        than in older Exodus files, which only allowed a single node
        map.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="EdgeMapInfo">
        <ArraySelectionInformationHelper attribute_name="EdgeMap" />
      </StringVectorProperty>
      <StringVectorProperty command="SetEdgeMapArrayStatus"
                            element_types="2 0"
                            information_property="EdgeMapInfo"
                            name="EdgeMapArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="EdgeMapInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Specify which maps defined over edges in the mesh should
        be loaded. An edge map is a renumbering of all the edges (across all
        the edge blocks of a file) from their offset in the file to some
        arbitrary integers, usually specifying a unique global ID across a set
        of files.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="FaceMapInfo">
        <ArraySelectionInformationHelper attribute_name="FaceMap" />
      </StringVectorProperty>
      <StringVectorProperty command="SetFaceMapArrayStatus"
                            element_types="2 0"
                            information_property="FaceMapInfo"
                            name="FaceMapArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="FaceMapInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Specify which maps defined over faces in the mesh should
        be loaded. A face map is a renumbering of all the faces (across all the
        face blocks of a file) from their offset in the file to some arbitrary
        integers, usually specifying a unique global ID across a set of
        files.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ElementMapInfo">
        <ArraySelectionInformationHelper attribute_name="ElementMap" />
      </StringVectorProperty>
      <StringVectorProperty command="SetElementMapArrayStatus"
                            element_types="2 0"
                            information_property="ElementMapInfo"
                            name="ElementMapArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ElementMapInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Specify which maps defined over elements (cells) in the
        mesh should be loaded. An element map is a renumbering of all the
        elements (across all the element blocks of a file) from their offset in
        the file to some arbitrary integers, usually specifying a unique global
        ID across a set of files. These are sometimes called new-style maps
        because they are specified differently than in older Exodus files,
        which only allowed a single element map.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="NodeSetInfo">
        <ArraySelectionInformationHelper attribute_name="NodeSet" />
      </StringVectorProperty>
      <StringVectorProperty command="SetNodeSetArrayStatus"
                            element_types="2 0"
                            information_property="NodeSetInfo"
                            name="NodeSetArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="NodeSetInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the nodes
        (points) in a file as sets in their own right. Variables, such as
        boundary conditions, may then be defined over these sets by specifying
        a single number per node. This property specifies which of those sets
        should be loaded. The accompanying NodeSetResultArrayStatus property
        specifies which variables defined over those sets should be
        loaded.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="SideSetInfo">
        <ArraySelectionInformationHelper attribute_name="SideSet" />
      </StringVectorProperty>
      <StringVectorProperty command="SetSideSetArrayStatus"
                            element_types="2 0"
                            information_property="SideSetInfo"
                            name="SideSetArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="SideSetInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the
        <i>boundaries</i>of all the elements in a file as sets in their own
        right. This property specifies which of those sets should be loaded.
        Variables, such as boundary conditions, may then be defined over these
        sets by specifying a single number per side. For example, a hexahedron
        has 18 sides: 6 faces and 12 edges. Any of these sides may be
        individually called out in a set and assigned a result value. The
        accompanying SideSetResultArrayStatus property specifies which
        variables defined over those sets should be loaded.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="FaceSetInfo">
        <ArraySelectionInformationHelper attribute_name="FaceSet" />
      </StringVectorProperty>
      <StringVectorProperty command="SetFaceSetArrayStatus"
                            element_types="2 0"
                            information_property="FaceSetInfo"
                            name="FaceSetArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="FaceSetInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the faces
        (across all face blocks) in a file as sets in their own right. This
        property specifies which of those sets should be loaded. Variables,
        such as boundary conditions, may then be defined over these sets by
        specifying a single number per face. The accompanying
        FaceSetResultArrayStatus property specifies which variables defined
        over those sets should be loaded.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="EdgeSetInfo">
        <ArraySelectionInformationHelper attribute_name="EdgeSet" />
      </StringVectorProperty>
      <StringVectorProperty command="SetEdgeSetArrayStatus"
                            element_types="2 0"
                            information_property="EdgeSetInfo"
                            name="EdgeSetArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="EdgeSetInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the edges
        (across all edge blocks) in a file as sets in their own right. This
        property specifies which of those sets should be loaded. Variables,
        such as boundary conditions, may then be defined over these sets by
        specifying a single number per edge. The accompanying
        EdgeSetResultArrayStatus property specifies which variables defined
        over those sets should be loaded.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ElementSetInfo">
        <ArraySelectionInformationHelper attribute_name="ElementSet" />
      </StringVectorProperty>
      <StringVectorProperty command="SetElementSetArrayStatus"
                            element_types="2 0"
                            information_property="ElementSetInfo"
                            name="ElementSetArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ElementSetInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the elements
        (across all element blocks) in a file as sets in their own right. This
        property specifies which of those sets should be loaded. Variables,
        such as feature classifiers, may then be defined over these sets by
        specifying a single number per element. The accompanying
        ElementSetResultArrayStatus property specifies which variables defined
        over those sets should be loaded.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ElementSetResultArrayInfo">
        <ArraySelectionInformationHelper attribute_name="ElementSetResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetElementSetResultArrayStatus"
                            element_types="2 0"
                            information_property="ElementSetResultArrayInfo"
                            name="ElementSetResultArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ElementSetResultArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the elements
        (across all element blocks) in a file as sets in their own right.
        Variables, such as feature classifiers, may then be defined over these
        sets by specifying a single number per element. This property specifies
        which of those variables should be loaded. The corresponding set must
        also be loaded using the ElementSetArrayStatus property in order for
        the variable to appear.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="SideSetResultArrayInfo">
        <ArraySelectionInformationHelper attribute_name="SideSetResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetSideSetResultArrayStatus"
                            element_types="2 0"
                            information_property="SideSetResultArrayInfo"
                            name="SideSetResultArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="SideSetResultArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the
        <i>boundaries</i>of all the elements in a file as sets in their own
        right. Variables, such as boundary conditions, may then be defined over
        these sets by specifying a single number per side. For example, a
        hexahedron has 18 sides: 6 faces and 12 edges. Any of these sides may
        be individually called out in a set and assigned a result value. This
        property specifies which of those variables should be loaded. The
        corresponding set must also be loaded using the SideSetArrayStatus
        property in order for the variable to appear.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="FaceSetResultArrayInfo">
        <ArraySelectionInformationHelper attribute_name="FaceSetResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetFaceSetResultArrayStatus"
                            element_types="2 0"
                            information_property="FaceSetResultArrayInfo"
                            name="FaceSetResultArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="FaceSetResultArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the faces
        (across all face blocks) in a file as sets in their own right.
        Variables, such as boundary conditions, may then be defined over these
        sets by specifying a single number per face. This property specifies
        which of those variables should be loaded. The corresponding set must
        also be loaded using the FaceSetArrayStatus property in order for the
        variable to appear.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="EdgeSetResultArrayInfo">
        <ArraySelectionInformationHelper attribute_name="EdgeSetResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetEdgeSetResultArrayStatus"
                            element_types="2 0"
                            information_property="EdgeSetResultArrayInfo"
                            name="EdgeSetResultArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="EdgeSetResultArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the edges
        (across all edge blocks) in a file as sets in their own right.
        Variables, such as boundary conditions, may then be defined over these
        sets by specifying a single number per edge. This property specifies
        which of those variables should be loaded. The corresponding set must
        also be loaded using the EdgeSetArrayStatus property in order for the
        variable to appear.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="NodeSetResultArrayInfo">
        <ArraySelectionInformationHelper attribute_name="NodeSetResult" />
      </StringVectorProperty>
      <StringVectorProperty command="SetNodeSetResultArrayStatus"
                            element_types="2 0"
                            information_property="NodeSetResultArrayInfo"
                            name="NodeSetResultArrayStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="NodeSetResultArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>An Exodus II file may define subsets of all the nodes
        (points) in a file as sets in their own right. Variables, such as
        boundary conditions, may then be defined over these sets by specifying
        a single number per node. This property specifies which of those
        variables should be loaded. The corresponding set must also be loaded
        using the NodeSetArrayStatus property in order for the variable to
        appear.</Documentation>
        <Hints>
          <OmitFromLoadAllVariables />
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty command="SetApplyDisplacements"
                         default_values="1"
                         name="ApplyDisplacements"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Geometric locations can include displacements. When this
        option is on, the nodal positions are 'displaced' by the standard
        exodus displacement vector. If displacements are turned 'off', the user
        can explicitly add them by applying a warp filter.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetDisplacementMagnitude"
                            default_values="1"
                            name="DisplacementMagnitude"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>When displacements are being applied, they are scaled by
        this amount. Set to 1 for no scaling.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetGenerateObjectIdCellArray"
                         default_values="1"
                         name="GenerateObjectIdCellArray"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Specifies whether a variable named "ObjectId" should be
        created for each entry of each block and set being loaded and assigned
        the identifying number of the block or set, so that given a cell one
        can readily identify the block or set it came from. This is useful for
        coloring a mesh by block ID or set ID.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateGlobalNodeIdArray"
                         default_values="1"
                         name="GenerateGlobalNodeIdArray"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should the reader retrieve the first new-style node map,
        or if that is not present, the solitary old-style node map (which
        always exists but may be procedurally generated if it is not stored
        with the file)?</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateGlobalElementIdArray"
                         default_values="1"
                         name="GenerateGlobalElementIdArray"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should the reader retrieve the first new-style element
        map, or if that is not present, the solitary old-style element map
        (which always exists but may be procedurally generated if it is not
        stored with the file)?</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateImplicitNodeIdArray"
                         default_values="0"
                         name="GenerateImplicitNodeIdArray"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should the reader retrieve the solitary old-style node
        map (which always exists but may be procedurally generated if it is not
        stored with the file)?</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateImplicitElementIdArray"
                         default_values="0"
                         name="GenerateImplicitElementIdArray"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should the reader retrieve the solitary old-style
        element map (which always exists but may be procedurally generated if
        it is not stored with the file)?</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateFileIdArray"
                         default_values="0"
                         name="GenerateFileIdArray"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should each cell in the mesh be assigned an integer
        identifying the file it came from? If turned on, a cell variable named
        "FileId" should be present.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="GetFilePrefix"
                            information_only="1"
                            name="FilePrefixInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetFilePrefix"
                            information_property="FilePrefixInfo"
                            name="FilePrefix"
                            number_of_elements="1">
        <FileListDomain name="default_value"
                        optional="1">
          <RequiredProperties>
            <Property function="Prefix"
                      name="FilePrefixInfo" />
          </RequiredProperties>
        </FileListDomain>
        <Documentation>This property specifies the file root used with the file
        pattern to format a file name. (See the File Pattern
        property).</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetFilePattern"
                            information_only="1"
                            name="FilePatternInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetFilePattern"
                            information_property="FilePatternInfo"
                            name="FilePattern"
                            number_of_elements="1">
        <FileListDomain name="default_value"
                        optional="1">
          <RequiredProperties>
            <Property function="Pattern"
                      name="FilePatternInfo" />
          </RequiredProperties>
        </FileListDomain>
        <Documentation>This property contains a text string specifying the
        pattern used to load files. There are two parts to it: the prefix (%s)
        and the file number (%i). The format used is the same as that used for
        printf.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="GetFileRange"
                         information_only="1"
                         name="FileRangeInfo">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetFileRange"
                         default_values="-1 -1"
                         information_property="FileRangeInfo"
                         name="FileRange"
                         number_of_elements="2">
        <IntRangeDomain name="range">
          <RequiredProperties>
            <Property function="Range"
                      name="FileRangeInfo" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>This property controls the indices of the first and last
        files to be read.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="GetXMLFileName"
                            information_only="1"
                            name="XMLFileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetXMLFileName"
                            label="XML File Name"
                            name="XMLFileName"
                            number_of_elements="1">
        <FileListDomain name="default_value"
                        optional="1">
          <RequiredProperties>
            <Property function="XMLFileName"
                      name="XMLFileNameInfo" />
          </RequiredProperties>
        </FileListDomain>
        <Documentation>This property specifies the name of an XML file
        containing part and material descriptions and a mapping to element
        blocks.</Documentation>
      </StringVectorProperty>
      <!-- End ExodusIIReaderCore -->
    </SourceProxy>
    <SourceProxy class="vtkTecplotReader"
                 label="VTK Tecplot Reader"
                 name="TecplotReaderCore">
      <Documentation>Core for TecplotReader</Documentation>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="DataArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Data" />
      </StringVectorProperty>
      <StringVectorProperty command="SetDataArrayStatus"
                            element_types="2 0"
                            information_property="DataArrayInfo"
                            label="Data Arrays"
                            name="DataArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="DataArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists what dataset attribute arrays (point
        data and cell data) to read.</Documentation>
      </StringVectorProperty>
      <!-- End TecplotReaderCore-->
    </SourceProxy>
    <SourceProxy class="vtkNetCDFCAMReader"
                 label="NetCDF CAM reader"
                 name="NetCDFCAMReaderCore">
      <Documentation>Core for NetCDF CAM reader.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetConnectivityFileName"
                            name="ConnectivityFileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to read for the
        grid connectivity.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="PointsFileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to read for the
        points and field information.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetVerticalDimension"
                         default_values="1"
                         name="VerticalDimension"
                         number_of_elements="1">
        <Documentation>Specify whether to read variables from the
        single layer, from midpoint layers or from interface
        layers.</Documentation>
        <EnumerationDomain name="enum">
          <Entry text="Single layer [time, ncol]"
                 value="0" />
          <Entry text="Midpoint layers [time, lev, ncol]"
                 value="1" />
          <Entry text="Interface layers [time, ilev, ncol]"
                 value="2" />
        </EnumerationDomain>
      </IntVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            name="PointArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            panel_visibility="advanced">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which NetCDF CAM point
        variables to load.</Documentation>
      </StringVectorProperty>

      <IntVectorProperty name="SingleMidpointLayer"
                         command="SetSingleMidpointLayer"
                         number_of_elements="1"
                         default_values="0"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>
          Load only one layer from variables on the midpoint layers. The layer
          is specified by MidpointLayerIndex.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetMidpointLayersRange"
                         information_only="1"
                         name="MidpointLayersRangeInfo"></IntVectorProperty>
      <IntVectorProperty name="MidpointLayerIndex"
                            command="SetMidpointLayerIndex"
                            number_of_elements="1"
                            default_values="0"
                            panel_visibility="advanced">
        <IntRangeDomain name="range"  default_mode="min">
          <RequiredProperties>
            <Property function="Range"
                      name="MidpointLayersRangeInfo" />
          </RequiredProperties>
        </IntRangeDomain>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
            <Property name="SingleMidpointLayer" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
        <Documentation>
          Specifies which layer to load from the midpoint layers. Note that
          the layer indexes 0 to n-1 map to Z values n-1 to 0.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty name="SingleInterfaceLayer"
                         command="SetSingleInterfaceLayer"
                         number_of_elements="1"
                         default_values="0"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>
          Load only one layer from variables on the interface layers. The layer
          is specified by InterfaceLayerIndex.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetInterfaceLayersRange"
                         information_only="1"
                         name="InterfaceLayersRangeInfo"></IntVectorProperty>
      <IntVectorProperty name="InterfaceLayerIndex"
                            command="SetInterfaceLayerIndex"
                            number_of_elements="1"
                            default_values="0"
                            panel_visibility="advanced">
        <IntRangeDomain name="range"  default_mode="min">
          <RequiredProperties>
            <Property function="Range"
                      name="InterfaceLayersRangeInfo" />
          </RequiredProperties>
        </IntRangeDomain>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
            <Property name="SingleInterfaceLayer" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
        <Documentation>
          Specifies which layer to load from the interface layers. Note that
          the layer indexes 0 to n-1 map to Z values n-1 to 0.
        </Documentation>
      </IntVectorProperty>

      <IntVectorProperty default_values="1"
                         name="CellLayerRight"
                         number_of_elements="1"
                         panel_visibility="never">
        <Documentation>**DEPRECATED in ParaView 4.4.** No longer needed/suported.</Documentation>
        <BooleanDomain name="bool" />
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="nc ncdf"
                       file_description="CAM NetCDF (Unstructured)" />
      </Hints>
    </SourceProxy>
    <!-- End NetCDFCAMReaderCore -->
    <SourceProxy class="vtkNetCDFPOPReader"
                 label="NetCDF POP reader"
                 name="NetCDFPOPReaderCore">
      <Documentation>Core for NetCDF POP reader.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="VariableArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Variable" />
      </StringVectorProperty>
      <StringVectorProperty command="SetVariableArrayStatus"
                            element_types="2 0"
                            information_property="VariableArrayInfo"
                            label="Variables"
                            name="VariableArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="VariableArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which netCDF variables to
        load.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetStride"
                         default_values="1 1 1"
                         name="Stride"
                         number_of_elements="3">
        <IntRangeDomain min="1 1 1"
                        name="range" />
        <Documentation>This property indicate the number of indices per
        dimension (i,j,k) to skip between each point included in this
        output.</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="pop.ncdf pop.nc"
                       file_description="POP Ocean NetCDF (Rectilinear)" />
      </Hints>
    </SourceProxy>
    <!-- End NetCDFPOPReaderCore -->
    <SourceProxy class="vtkUnstructuredPOPReader"
                 label="Unstructured NetCDF POP reader"
                 name="UnstructuredPOPReaderCore">
      <Documentation long_help="Reads rectilinear grid data from a NetCDF POP file and converts it into unstructured data."
                     short_help="Read rectlinear grid data from a NetCDF file in the POP format and converts it into unstructured data.">
      The reader reads regular rectilinear grid (image/volume) data from a
      NetCDF file and turns it into an unstructured spherical
      grid.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to
        read.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetStride"
                         default_values="1 1 1"
                         name="Stride"
                         number_of_elements="3">
        <IntRangeDomain min="1 1 1"
                        name="range" />
        <Documentation>This property indicate the number of indices per
        dimension (i,j,k) to skip between each point included in this
        output.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetVOI"
                         default_values="0 -1 0 -1 0 -1"
                         label="VOI"
                         name="VOI"
                         number_of_elements="6"
                         panel_visibility="default">
        <IntRangeDomain name="range" />
        <Documentation>The data volume of interest (VOI). The VOI is a
        sub-extent of the data that you want loaded. Setting a VOI is useful
        when reading from a large data set and you are only interested in a
        small portion of the data. If left containing all 0's, then the reader
        will load in the entire data set.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetVerticalVelocity"
                         default_values="0"
                         label="VerticalVelocity"
                         name="VerticalVelocity"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If there is a velocity vector with only 2 components,
        specify that the reader should compute the third
        component.</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="pop.ncdf pop.nc"
                       file_description="POP Ocean NetCDF (Unstructured)" />
      </Hints>
    </SourceProxy>
    <!-- End UnstructuredPOPReaderCore -->
    <SourceProxy class="vtkPNetCDFPOPReader"
                 label="Parallel NetCDF POP reader"
                 name="PNetCDFPOPReaderCore">
      <Documentation>Core for Parallel NetCDF POP reader.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="VariableArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Variable" />
      </StringVectorProperty>
      <StringVectorProperty command="SetVariableArrayStatus"
                            element_types="2 0"
                            information_property="VariableArrayInfo"
                            label="Variables"
                            name="VariableArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="VariableArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which netCDF variables to
        load.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetStride"
                         default_values="1 1 1"
                         name="Stride"
                         number_of_elements="3">
        <IntRangeDomain min="1 1 1"
                        name="range" />
        <Documentation>This property indicates the number of indices per
        dimension (i,j,k) to skip between each point included in this
        output.</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="pop.ncdf pop.nc"
                       file_description="Parallel POP Ocean NetCDF (Rectilinear)" />
      </Hints>
    </SourceProxy>
    <!-- End PNetCDFPOPReaderCore -->


    <!-- ============================================================= -->
    <SourceProxy class="vtkPNGReader"
                 label="PNG Reader"
                 name="PNGReader">
      <Documentation long_help="Reads a PNG file into an image data."
                     short_help="Read a PNG file.">The PNG reader reads PNG
                     (Portable Network Graphics) files, and the output is a
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .png.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the PNG
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty name="DataSpacing"
                            command="SetDataSpacing"
                            number_of_elements="3"
                            default_values="1 1 1">
        <DoubleRangeDomain name="range" min="0 0 0" />
        <Documentation>
          Set the spacing to use for the image output by this reader.
        </Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="png"
                       file_description="PNG Image Files" />
      </Hints>
      <!-- End PNGReader -->
    </SourceProxy>
    <SourceProxy class="vtkJPEGReader"
                 label="JPEG Reader"
                 name="JPEGReader">
      <Documentation long_help="Reads a JPEG file into an image data."
                     short_help="Read a JPEG file.">The JPEG reader reads JPEG
                     files, and the output is a uniform rectilinear
                     (image/volume) dataset. The default file extension is .jpg
                     or .jpeg.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the PNG
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty name="DataSpacing"
                            command="SetDataSpacing"
                            number_of_elements="3"
                            default_values="1 1 1">
        <DoubleRangeDomain name="range" min="0 0 0" />
        <Documentation>
          Set the spacing to use for the image output by this reader.
        </Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="jpg jpeg"
                       file_description="JPEG Image Files" />
      </Hints>
      <!-- End JPEGReader -->
    </SourceProxy>
    <SourceProxy class="vtkTIFFReader"
                 label="TIFF Reader"
                 name="TIFFReader">
      <Documentation long_help="Reads a TIFF file into an image data."
                     short_help="Read a TIFF file.">The TIFF reader reads TIFF
                     (Tagged Image File Format) files, and the output is a
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .tiff.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the TIFF
        reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="UseCustomDataSpacing"
                         command="SetSpacingSpecifiedFlag"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>
          To manually specify a custom spacing using **CustomDataSpacing**, set this property to 1 (checked).
        </Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty name="CustomDataSpacing"
                            command="SetDataSpacing"
                            information_property="CustomDataSpacingInfo"
                            number_of_elements="3"
                            default_values="1 1 1">
        <DoubleRangeDomain name="range" min="0 0 0" />
        <Documentation>
          Set the spacing to use for the image output by this reader. This is used only when
          **UseCustomDataSpacing** is set to true.
        </Documentation>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
            <Property name="UseCustomDataSpacing" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </DoubleVectorProperty>
      <DoubleVectorProperty name="CustomDataSpacingInfo"
                            command="GetDataSpacing"
                            information_only="1">
        <SimpleDoubleInformationHelper />
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="tif tiff"
                       file_description="TIFF Image Files" />
      </Hints>
      <!-- End TIFFReader -->
    </SourceProxy>
    <SourceProxy class="vtkMRCReader"
                 label="MRC Reader"
                 name="MRCReader">
      <Documentation long_help="Reads a MRC file into an image data."
                     short_help="Read a MRC file.">The MRC reader reads MRC
                     (Medical Research Council) image files, and the output is a
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .mrc but .st, .rec and .ali extensions
                     are known to be commonly used as well.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="mrc st rec ali"
                       file_description="MRC Image Files" />
      </Hints>
      <!-- End MRCReader -->
    </SourceProxy>
    <SourceProxy class="vtkNetCDFCFReader"
                 name="netCDFReaderCore">
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetAllDimensions"
                            information_only="1"
                            name="DimensionInfo">
        <StringArrayHelper />
      </StringVectorProperty>
      <StringVectorProperty animatelable="0"
                            command="SetDimensions"
                            name="Dimensions"
                            number_of_elements="1"
                            panel_visibility="default">
        <StringListDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="DimensionInfo" />
          </RequiredProperties>
        </StringListDomain>
        <Documentation>Load the grid with the given dimensions. Any arrays that
        conform to these dimensions will be loaded.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetVariableDimensions"
                            information_only="1"
                            name="VariableDimensionInfo">
        <StringArrayHelper />
      </StringVectorProperty>
      <StringVectorProperty command="GetAllVariableArrayNames"
                            information_only="1"
                            name="VariableArrayInfo">
        <StringArrayHelper />
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetSphericalCoordinates"
                         default_values="1"
                         name="SphericalCoordinates"
                         number_of_elements="1"
                         panel_visibility="default">
        <BooleanDomain name="bool" />
        <Documentation>If on, then data with latitude/longitude dimensions will
        be read in as curvilinear data shaped like spherical coordinates. If
        false, then the data will always be read in Cartesian
        coordinates.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetVerticalScale"
                            default_values="1"
                            name="VerticalScale"
                            number_of_elements="1"
                            panel_visibility="default">
        <DoubleRangeDomain name="range" />
        <Documentation>The scale of the vertical component of spherical
        coordinates. It is common to write the vertical component with respect
        to something other than the center of the sphere (for example, the
        surface). In this case, it might be necessary to scale and/or bias the
        vertical height. The height will become height*scale + bias. Keep in
        mind that if the positive attribute of the vertical dimension is down,
        then the height is negated. The scaling will be adjusted if it results
        in invalid (negative) vertical values.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetVerticalBias"
                            default_values="0"
                            name="VerticalBias"
                            number_of_elements="1"
                            panel_visibility="default">
        <DoubleRangeDomain name="range" />
        <Documentation>The bias of the vertical component of spherical
        coordinates. It is common to write the vertical component with respect
        to something other than the center of the sphere (for example, the
        surface). In this case, it might be necessary to scale and/or bias the
        vertical height. The height will become height*scale + bias. Keep in
        mind that if the positive attribute of the vertical dimension is down,
        then the height is negated. The scaling will be adjusted if it results
        in invalid (negative) vertical values.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetReplaceFillValueWithNan"
                         default_values="0"
                         name="ReplaceFillValueWithNan"
                         number_of_elements="1"
                         panel_visibility="default">
        <BooleanDomain name="bool" />
        <Documentation>If on, any float or double variable read that has a
        _FillValue attribute will have that fill value replaced with a
        not-a-number (NaN) value. The advantage of setting these to NaN values
        is that, if implemented properly by the system and careful math
        operations are used, they can implicitly be ignored by calculations
        like finding the range of the values. That said, this option should be
        used with caution as VTK does not fully support NaN values and
        therefore odd calculations may occur.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetOutputType"
                         default_values="-1"
                         name="OutputType"
                         number_of_elements="1"
                         panel_visibility="default">
        <EnumerationDomain name="enum">
          <Entry text="Automatic"
                 value="-1" />
          <Entry text="Image"
                 value="6" />
          <Entry text="Rectilinear"
                 value="3" />
          <Entry text="Structured"
                 value="2" />
          <Entry text="Unstructured"
                 value="4" />
        </EnumerationDomain>
        <Documentation>Specifies the type of data that the reader creates. If
        Automatic, the reader will use the most appropriate grid type for the
        data read. Note that not all grid types support all data. A warning is
        issued if a mismatch occurs.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>This magic property sends time information to the
        animation panel. ParaView will then automatically set up the animation
        to visit the time steps defined in the file.</Documentation>
      </DoubleVectorProperty>
    </SourceProxy>
    <!-- netCDFReaderCore -->
    <SourceProxy class="vtkMultiBlockPLOT3DReader"
                 name="P3DReaderCore">
      <Documentation long_help="Reads ASCII or binary PLOT3D files."
                     short_help="Read PLOT3D files.">PLOT3D is a plotting
                     package developed at NASA. The PLOT3D reader can read both
                     ASCII and binary PLOT3D files. The default file extension
                     for the geometry files is .xyz, and the default file
                     extension for the solution files is .q. The output of this
                     reader is a multi-block dataset containing curvilinear
                     (structured grid) datasets.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the .xyz (geometry) file name
        for the PLOT3D reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetQFileName"
                            name="QFileName"
                            number_of_elements="1"
                            panel_visibility="default">
        <FileListDomain name="files" />
        <Documentation>This property specifies the .q (solution) file name for
          the PLOT3D reader.</Documentation>
        <Hints>
          <FileChooser extensions="q" file_description="Solution files" />
        </Hints>
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetFunctionFileName"
                            name="FunctionFileName"
                            number_of_elements="1"
                            panel_visibility="default">
        <FileListDomain name="files" />
        <Documentation>This property specifies the .f (function) file name for
        the PLOT3D reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetAutoDetectFormat"
                         default_values="1"
                         name="AutoDetectFormat"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When this options is enabled, the reader will try to
  automatically figure out various settings for a binary file. The other
  options are ignored. Does not work for text (ascii) files.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetBinaryFile"
                         default_values="1"
                         name="BinaryFile"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether the data files are
        binary.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMultiGrid"
                         default_values="0"
                         name="MultiGrid"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether these files have
        multiple-block information.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetHasByteCount"
                         default_values="0"
                         name="HasByteCount"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether this file uses Fortran
        leading-trailing byte counts.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetIBlanking"
                         default_values="0"
                         name="IBlanking"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether this dataset has
        visibility information.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetTwoDimensionalGeometry"
                         default_values="0"
                         name="TwoDimensionalGeometry"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether the data is two- or
        three-dimensional.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetForceRead"
                         default_values="0"
                         name="ForceRead"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether to attempt to read the
        file even if it appears corrupt</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetDoublePrecision"
                         default_values="0"
                         name="DoublePrecision"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property specifies whether floating points values
  are in double precision.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetByteOrder"
                         default_values="0"
                         name="ByteOrder"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="BigEndian"
                 value="0" />
          <Entry text="LittleEndian"
                 value="1" />
        </EnumerationDomain>
        <Documentation>This property specifies the byte order of any binary
        file(s).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty clean_command="RemoveAllFunctions"
                         command="AddFunction"
                         name="Functions"
                         number_of_elements_per_command="1"
                         panel_visibility="default"
                         repeat_command="1">
        <EnumerationDomain name="array_list">
          <!-- <Entry value="100" text="Scalar - Density"/> -->
          <Entry text="Scalar - Pressure"
                 value="110" />
          <Entry text="Scalar - Pressure Coefficient"
                 value="111" />
          <Entry text="Scalar - Mach Number"
                 value="112" />
          <Entry text="Scalar - Sound Speed"
                 value="113" />
          <Entry text="Scalar - Temperature"
                 value="120" />
          <Entry text="Scalar - Enthalpy"
                 value="130" />
          <Entry text="Scalar - Internal energy"
                 value="140" />
          <Entry text="Scalar - Kinetic energy"
                 value="144" />
          <Entry text="Scalar - Velocity magnitude"
                 value="153" />
          <!-- <Entry value="163" text="Scalar - Stagnation energy"/> -->
          <Entry text="Scalar - Entropy"
                 value="170" />
          <Entry text="Scalar - Swirl."
                 value="184" />
          <Entry text="Vector - Velocity"
                 value="200" />
          <Entry text="Vector - Vorticity"
                 value="201" />
          <!-- <Entry value="202" text="Vector - Momentum"/> -->
          <Entry text="Vector - Pressure gradient"
                 value="210" />
        </EnumerationDomain>
        <Documentation>This property lists which functions (point-centered
        arrays) to compute.</Documentation>
      </IntVectorProperty>
      <!-- End P3DReaderCore -->
    </SourceProxy>
    <!-- Beginning of FLUENTReaderCore -->
    <SourceProxy class="vtkFLUENTReader"
                 name="FLUENTReaderCore">
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
    </SourceProxy>
    <!-- End of FLUENTReaderCore -->

    <!-- =================================================================== -->
    <SourceProxy class="vtkXdmfReader" name="XdmfReaderCore">
      <Documentation>
        The actual reader proxy for Xdmf Reader. Make internal since it doesnt'
        support file-series.
      </Documentation>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            panel_visibility="default"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            panel_visibility="default"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="SetInfo">
        <ArraySelectionInformationHelper attribute_name="Set" />
      </StringVectorProperty>
      <StringVectorProperty command="SetSetStatus"
                            element_types="2 0"
                            information_property="SetInfo"
                            label="Sets"
                            name="SetStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="SetInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select the sets to be loaded from the dataset, if
        any.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetSIL"
                            information_only="1"
                            name="GridInfo"
                            si_class="vtkSISILProperty"
                            subtree="Blocks" />
      <IdTypeVectorProperty command="GetSILUpdateStamp"
                            default_values="0"
                            information_only="1"
                            name="SILTimeStamp"
                            number_of_elements="1" />
      <StringVectorProperty command="SetGridStatus"
                            element_types="2 0"
                            label="Grids"
                            name="GridStatus"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <SILDomain name="array_list"
                   subtree="Blocks">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="GridInfo" />
            <Property function="TimeStamp"
                      name="SILTimeStamp" />
          </RequiredProperties>
        </SILDomain>
        <Documentation>Controls which particular data sets to read from a file
        that contains many data sets inside a composite data set
        collection.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetStride"
                         default_values="1 1 1"
                         name="Stride"
                         number_of_elements="3">
        <IntRangeDomain min="1 1 1"
                        name="range" />
        <Documentation>If loading structured data, this property indicate the
        number of indices per dimension (X, Y, or Z) to skip between each point
        included in this output.</Documentation>
      </IntVectorProperty>
      <!-- End of XdmfReaderCore -->
    </SourceProxy>

    <SourceProxy class="vtkPLYReader" name="PLYReaderCore">
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the PLY
        reader.</Documentation>
      </StringVectorProperty>
      <!-- End PLYReaderCore -->
    </SourceProxy>

    <!-- End of "internal_sources" -->
  </ProxyGroup>

  <ProxyGroup name="sources">
    <!--  AMR Flash Particles Reader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="FLASH AMR Particles Reader"
                 name="FlashParticlesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads AMR particles from FLASH dataset"
                     short_help="Reads AMR particles from FLASH dataset">The
                     Flash particles reader loads particle simulation data
                     stored in Flash format. The output of this reader is a
                     MultiBlock dataset where each block is vtkPolyData that
                     holds the particles and corresponding particle
                     data.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="FlashParticlesReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="NumParticles" />
          <Property name="Frequency" />
          <Property name="FilterLocation" />
          <Property name="MinLocation" />
          <Property name="MaxLocation" />
          <Property name="ParticleArrayStatus" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="0"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="Flash flash"
                       file_description="FLASH AMR Particles Reader" />
      </Hints>
    </SourceProxy>
    <!--  Enzo Particles Reader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="ENZO AMR Particles Reader"
                 name="EnzoParticlesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads AMR particles from an ENZO dataset"
                     short_help="Reads AMR particles from an ENZO dataset">The
                     Enzo particles reader loads particle simulation data
                     stored in Enzo HDF5 format. The output of this reader is
                     MultiBlock dataset where each block is a vtkPolyData that
                     holds the particles (points) and corresponding particle
                     data.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="EnzoParticlesReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="NumParticles" />
          <Property name="Frequency" />
          <Property name="FilterLocation" />
          <Property name="MinLocation" />
          <Property name="MaxLocation" />
          <Property name="ParticleArrayStatus" />
          <Property name="ParticleType" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="0"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="boundary hierarchy"
                       file_description="ENZO AMR Particles Reader" />
      </Hints>
    </SourceProxy>
    <!--  Flash Reader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Flash Reader"
                 name="FlashReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Read hierarchical box dataset from a Flash dataset."
                     short_help="Read hierarchical box dataset from a Flash dataset.">
                     This Flash reader loads data stored in Enzo format. The
                     output of this reader is a hierarchical-box
                     dataset.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="FlashReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="NumLevels" />
          <Property name="NumBlocks" />
          <Property name="EnableCaching" />
          <Property name="Level" />
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="PointArrayStatus" />
            <Property name="CellArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="0"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="Flash flash"
                       file_description="AMR Flash Files" />
      </Hints>
    </SourceProxy>
    <!--  END Flash Reader -->
    <!-- Enzo Reader  -->
    <SourceProxy class="vtkAMRFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Enzo Reader"
                 name="EnzoReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Read hierarchical box dataset from an Enzo file."
                     short_help="Read hierarchical box dataset from an Enzo file.">
                     This Enzo reader loads data stored in Enzo format. The
                     output of this reader is a hierarchical-box
                     dataset.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="EnzoReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="NumLevels" />
          <Property name="NumBlocks" />
          <Property name="EnableCaching" />
          <Property name="ConvertToCGS" />
          <Property name="Level" />
          <Property name="PointArrayStatus" />
          <Property name="CellArrayStatus" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="0"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="boundary hierarchy"
                       file_description="AMR Enzo Files" />
      </Hints>
    </SourceProxy>
    <!--  END Enzo Reader -->
    <SourceProxy class="vtkDEMReader"
                 label="DEM Reader"
                 name="DEMReader">
      <Documentation long_help="Reads a DEM (Digital Elevation Model) file."
                     short_help="Read a dataset in DEM format">The DEM reader
                     reads Digital Elevation Model files containing elevation
                     values derived from the U. S. Geologic Survey. The default
                     file extension is .dem. This reader produces uniform
                     rectilinear (image/volume) data output.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the DEM
        (Digital Elevation Map) reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="dem"
                       file_description="Digital Elevation Map Files" />
      </Hints>
    </SourceProxy>
      <!-- End DEMReader -->
    <SourceProxy class="vtkPTSReader"
                 label="PTS Reader"
                 name="PTSReader">
      <Documentation long_help="Reads a PTS ASCII Point Cloud file."
                     short_help="Read a pointset in PTS format">The PTS reader
                     reads  ASCII PTS Point Cloud files containing
                     points as well as optional intensity and color information. The default
                     file extension is .pts. This reader produces a
                     polydata set of a single vertex cell containing all of
                     the points.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the PTS
        (ASCII Point Cloud) reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetLimitToMaxNumberOfPoints"
                         name="LimitNumberOfPointsRead"
                         default_values="0"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Limits the number of points read in from file
        </Documentation>
      </IntVectorProperty>
       <IntVectorProperty command="SetMaxNumberOfPoints"
                         name="MaxNumberOfPoints"
                         default_values="100000"
                         number_of_elements="1">
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="LimitNumberOfPointsRead"
                                   value="1" />
        </Hints>
        <Documentation>
          Specify the max number of point to be read.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetLimitReadToBounds"
                         name="LimitPointCloudToBounds"
                         default_values="0"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>
          Restrict the point to cloud to a specified volume.
        </Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty animateable="0"
                            command="SetReadBounds"
                            name="ReadBounds"
                            number_of_elements="6"
                            default_values="0 100 0 100 0 100">
        <Hints>
          <PropertyWidgetDecorator type="GenericDecorator"
                                   mode="visibility"
                                   property="LimitPointCloudToBounds"
                                   value="1" />
        </Hints>
        <Documentation>Define the spatial volume that wil restrict the
        extent of the point cloud [xmin, xmax, ymin, ymax, zmin, zmax]</Documentation>

      </DoubleVectorProperty>
       <Hints>
        <ReaderFactory extensions="pts"
                       file_description="PTS (Point Cloud)  Files" />
      </Hints>
    </SourceProxy>
      <!-- End PTSReader -->
    <SourceProxy class="vtkPVDReader"
                 label="PVD Reader"
                 name="PVDReader">
      <Documentation long_help="Load a dataset stored in ParaView's PVD file format."
                     short_help="Read a PVD file.">The PVD reader reads data
                     stored in ParaView's PVD file format. The .pvd file is
                     essentially a header file that collects together other
                     data files stored in VTK's XML-based file
                     format.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the PVD
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvd"
                       file_description="ParaView Data Files" />
      </Hints>
      <!-- End PVDReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Meta File Series Reader"
                 name="MetaImageReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a series of meta images."
                     short_help="Read a series of meta images.">Read a series
                     of meta images. The file extension is .mhd</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="MetaImageReaderCore"></Proxy>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the meta format. The standard extension is .mhd. If
        more than one file is specified, the reader will switch to file series
        mode in which it will pretend that it can support time and provide one
        file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="mhd mha"
                       file_description="Meta Image Files" />
      </Hints>
      <!-- end of MetaFileSeriesReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML MultiBlock Data Reader"
                 name="XMLMultiBlockDataReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a VTK XML multi-block data file and the serial VTK XML data files to which it points."
                     short_help="Read VTK XML multi-block datasets.">The XML
                     Multi-Block Data reader reads the VTK XML multi-block data
                     file format. XML multi-block data files are meta-files
                     that point to a list of serial VTK XML files. When reading
                     in parallel, this reader will distribute sub-blocks among
                     processors. The expected file extensions are .vtm and
                     .vtmb.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLMultiBlockDataReaderCore"></Proxy>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML polygonal dataset format. The standard
        extension is .vtp. If more than one file is specified, the reader will
        switch to file series mode in which it will pretend that it can support
        time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vtm vtmb"
                       file_description="VTK MultiBlock Data Files" />
      </Hints>
      <!-- end of XMLMultiBlockDataReader -->
    </SourceProxy>

    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML UniformGrid AMR Reader"
                 name="XMLUniformGridAMRReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a VTK XML-based data file containing a AMR datasets ."
                     short_help="Read a VTK data file containing AMR dataset.">
                     This reader reads Overlapping and Non-Overlapping AMR
                     datasets in VTK XML format. This reader reads the newer
                     version of the format. For version 1.0 and less, use
                     XMLHierarchicalBoxDataReader.
                     The expected file extensions is either .vthb or .vth.
      </Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLUniformGridAMRReaderCore">
        </Proxy>
        <ExposedProperties>
          <Property name="DefaultNumberOfLevels" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML polygonal dataset format. The standard
        extension is .vtp. If more than one file is specified, the reader will
        switch to file series mode in which it will pretend that it can support
        time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vthb vth"
                       file_description="VTK Hierarchical Box Data Files" />
      </Hints>
      <!-- end of XMLUniformGridAMRReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Hierarchical Box Data reader"
                 name="XMLHierarchicalBoxDataReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a VTK XML-based data file containing a hierarchical dataset containing vtkUniformGrids."
                     short_help="Read a VTK data file containing a hierarchical box dataset.">
                     The XML Hierarchical Box Data reader reads VTK's XML-based
                     file format containing a vtkHierarchicalBoxDataSet. The
                     expected file extensions is either .vthb or
                     .vth.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLHierarchicalBoxDataReaderCore"></Proxy>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML polygonal dataset format. The standard
        extension is .vtp. If more than one file is specified, the reader will
        switch to file series mode in which it will pretend that it can support
        time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <!--
      <Hints>
        <ReaderFactory extensions="vthb vth"
                       file_description="VTK Hierarchical Box Data Files" />
      </Hints>
      -->
      <!-- end of XMLHierarchicalBoxDataReader -->
    </SourceProxy>

    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML PolyData Reader"
                 name="XMLPolyDataReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads serial VTK XML polydata files."
                     short_help="Read VTK XML polydata files.">The XML Polydata
                     reader reads the VTK XML polydata file format. The
                     standard extension is .vtp. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLPolyDataReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML polygonal dataset format. The standard
        extension is .vtp. If more than one file is specified, the reader will
        switch to file series mode in which it will pretend that it can support
        time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vtp"
                       file_description="VTK PolyData Files" />
      </Hints>
    </SourceProxy>

    <!-- XMLPolyDataReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Unstructured Grid Reader"
                 name="XMLUnstructuredGridReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads serial VTK XML unstructured grid data files."
                     short_help="Read VTK XML unstructured grid data files.">
                     The XML Unstructured Grid reader reads the VTK XML
                     unstructured grid data file format. The standard extension
                     is .vtu. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLUnstructuredGridReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML unstructured grid data format. The
        standard extension is .vtu. If more than one file is specified, the
        reader will switch to file series mode in which it will pretend that it
        can support time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vtu"
                       file_description="VTK UnstructuredGrid Files" />
      </Hints>
    </SourceProxy>
    <!-- XMLUnstructuredGridReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Image Data Reader"
                 name="XMLImageDataReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads serial VTK XML image data files."
                     short_help="Read VTK XML image data files.">The XML Image
                     Data reader reads the VTK XML image data file format. The
                     standard extension is .vti. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLImageDataReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML image data format. The standard extension
        is .vti. If more than one file is specified, the reader will switch to
        file series mode in which it will pretend that it can support time and
        provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vti"
                       file_description="VTK ImageData Files" />
      </Hints>
    </SourceProxy>
    <!-- XMLImageDataReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Structured Grid Reader"
                 name="XMLStructuredGridReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads serial VTK XML structured grid data files."
                     short_help="Read VTK XML structured grid data files.">The
                     XML Structured Grid reader reads the VTK XML structured
                     grid data file format. The standard extension is .vts.
                     This reader also supports file series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLStructuredGridReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML structured grid data format. The standard
        extension is .vts. If more than one file is specified, the reader will
        switch to file series mode in which it will pretend that it can support
        time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vts"
                       file_description="VTK StructuredGrid Files" />
      </Hints>
    </SourceProxy>
    <!-- XMLStructuredGridReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Rectilinear Grid Reader"
                 name="XMLRectilinearGridReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads serial VTK XML rectilinear grid data files."
                     short_help="Read VTK XML rectilinear grid data files.">The
                     XML Rectilinear Grid reader reads the VTK XML rectilinear
                     grid data file format. The standard extension is .vtr.
                     This reader also supports file series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLRectilinearGridReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the VTK XML rectilinear grid data format. The
        standard extension is .vtr. If more than one file is specified, the
        reader will switch to file series mode in which it will pretend that it
        can support time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vtr"
                       file_description="VTK RectilinearGrid Files" />
      </Hints>
    </SourceProxy>
    <!-- XMLRectilinearGridReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Partitioned Polydata Reader"
                 name="XMLPPolyDataReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads the summary file and the assicoated VTK XML polydata files."
                     short_help="Read partitioned VTK XML polydata files.">The
                     XML Partitioned Polydata reader reads the partitioned VTK
                     polydata file format. It reads the partitioned format's
                     summary file and then the associated VTK XML polydata
                     files. The expected file extension is .pvtp. This reader
                     also supports file series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLPPolyDataReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the partitioned VTK XML polygonal dataset format. The
        standard extension is .pvtp. If more than one file is specified, the
        reader will switch to file series mode in which it will pretend that it
        can support time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvtp"
                       file_description="VTK PolyData Files (partitioned)" />
      </Hints>
    </SourceProxy>
    <!-- XMLPPolyDataReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Partitioned Unstructured Grid Reader"
                 name="XMLPUnstructuredGridReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads the summary file and the associated VTK XML unstructured grid data files."
                     short_help="Read partitioned VTK XML unstructured grid data files.">
                     The XML Partitioned Unstructured Grid reader reads the
                     partitioned VTK unstructured grid data file format. It
                     reads the partitioned format's summary file and then the
                     associated VTK XML unstructured grid data files. The
                     expected file extension is .pvtu. This reader also
                     supports file series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLPUnstructuredGridReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the partitioned VTK XML unstructured grid data
        format. The standard extension is .pvtu. If more than one file is
        specified, the reader will switch to file series mode in which it will
        pretend that it can support time and provide one file per time
        step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvtu"
                       file_description="VTK UnstructuredGrid Files (partitioned)" />
      </Hints>
    </SourceProxy>
    <!-- XMLPUnstructuredGridReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Partitioned Image Data Reader"
                 name="XMLPImageDataReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads the summary file and the associated VTK XML image data files."
                     short_help="Read partitioned VTK XML image data files.">
                     The XML Partitioned Image Data reader reads the
                     partitioned VTK image data file format. It reads the
                     partitioned format's summary file and then the associated
                     VTK XML image data files. The expected file extension is
                     .pvti. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLPImageDataReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the partitioned VTK XML image data format. The
        standard extension is .pvti. If more than one file is specified, the
        reader will switch to file series mode in which it will pretend that it
        can support time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvti"
                       file_description="VTK ImageData Files (partitioned)" />
      </Hints>
    </SourceProxy>
    <!-- XMLPImageDataReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Partitioned Structured Grid Reader"
                 name="XMLPStructuredGridReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads the summary file and the associated VTK XML structured grid data files."
                     short_help="Read partitioned VTK XML structured grid data files.">
                     The XML Partitioned Structured Grid reader reads the
                     partitioned VTK structured grid data file format. It reads
                     the partitioned format's summary file and then the
                     associated VTK XML structured grid data files. The
                     expected file extension is .pvts. This reader also
                     supports file series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLPStructuredGridReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the partitioned VTK XML structured grid data format.
        The standard extension is .pvts. If more than one file is specified,
        the reader will switch to file series mode in which it will pretend
        that it can support time and provide one file per time
        step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvts"
                       file_description="VTK StructuredGrid Files (partitioned)" />
      </Hints>
    </SourceProxy>
    <!-- XMLPStructuredGridReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XML Partitioned Rectilinear Grid Reader"
                 name="XMLPRectilinearGridReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads the summary file and the associated VTK XML rectilinear grid data files."
                     short_help="Read partitioned VTK XML rectilinear grid data files.">
                     The XML Partitioned Rectilinear Grid reader reads the
                     partitioned VTK rectilinear grid file format. It reads the
                     partitioned format's summary file and then the associated
                     VTK XML rectilinear grid files. The expected file
                     extension is .pvtr. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XMLPRectilinearGridReaderCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be in the partitioned VTK XML rectilinear grid data format.
        The standard extension is .pvtr. If more than one file is specified,
        the reader will switch to file series mode in which it will pretend
        that it can support time and provide one file per time
        step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvtr"
                       file_description="VTK RectilinearGrid Files (partitioned)" />
      </Hints>
    </SourceProxy>
    <!-- XMLPRectilinearGridReader -->
    <SourceProxy class="vtkRTXMLPolyDataReader"
                 name="RTXMLPolyDataReader">
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>Set the file name for the real-time VTK polygonal
        dataset reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetLocation"
                            name="Location"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>Set the data directory containing real time data
        files.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetNextFileName"
                            information_only="1"
                            name="NextFileName"
                            number_of_elements="1">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <IntVectorProperty command="NewDataAvailable"
                         default_values="2"
                         information_only="1"
                         name="NewDataAvailable"
                         number_of_elements="1">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <Property command="UpdateToNextFile"
                name="UpdateToNextFile"></Property>
      <Property command="ResetReader"
                name="ResetReader"></Property>
      <!-- End of RTXMLPolyDataReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Legacy VTK Reader"
                 name="LegacyVTKFileReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads files stored in VTK's legacy file format."
                     short_help="Read legacy VTK files.">The Legacy VTK reader
                     loads files stored in VTK's legacy file format (before VTK
                     4.2, although still supported). The expected file
                     extension is .vtk. The type of the dataset may be
                     structured grid, uniform rectilinear grid (image/volume),
                     non-uniform rectiinear grid, unstructured grid, or
                     polygonal. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="legacyreader"></Proxy>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="vtk"
                       file_description="Legacy VTK files" />
      </Hints>
      <!-- End LegacyVTKFileReader -->
    </SourceProxy>
    <SourceProxy class="vtkPDataSetReader"
                 label="Partitioned Legacy VTK Reader"
                 name="pvtkfile">
      <Documentation long_help="Reads files stored in VTK partitioned legacy format."
                     short_help="Read partitioned legacy VTK files.">The
                     Partitioned Legacy VTK reader loads files stored in VTK's
                     partitioned legac file format (before VTK 4.2, although
                     still supported). The expected file extension is .pvtk.
                     The type of the dataset may be structured grid, uniform
                     rectilinear grid (image/volume), non-uniform rectilinear
                     grid, unstructured grid, or polygonal.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        Partitioned Legacy VTK reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="pvtk"
                       file_description="Legacy VTK Files (partitioned)" />
      </Hints>
      <!-- End pvtkfile -->
    </SourceProxy>
    <SourceProxy class="vtkPGenericEnSightReader"
                 label="EnSight Reader"
                 name="ensight">
      <Documentation long_help="Reads EnSight 6 and Gold files."
                     short_help="Read EnSight files.">The EnSight reader reads
                     files in the format produced by CEI's EnSight. EnSight 6
                     and Gold files (both ASCII and binary) are supported. The
                     default extension is .case. The output of this reader is a
                     multi-block dataset.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetCaseFileName"
                            name="CaseFileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the case file name for the
        EnSight reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="case CASE Case"
                       file_description="EnSight Files" />
      </Hints>
      <!-- End ensight -->
    </SourceProxy>
    <SourceProxy class="vtkSpyPlotReader"
                 label="Spy Plot Reader"
                 name="spcthreader">
      <Documentation long_help="Reads files in the SPCTH Spy Plot file format."
                     short_help="Read files in the Spy Plot format.">The Spy
                     Plot reader loads an ASCII meta-file called the "case"
                     file (extension .spcth). The case file lists all the
                     binary files containing the dataset. This reader produces
                     hierarchical datasets.</Documentation>
      <OutputPort index="0"
                  name="Volume Data" />
      <OutputPort index="1"
                  name="Tracers" />
      <OutputPort index="2"
                  name="Markers" />
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            panel_visibility="default"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Spy Plot
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetDownConvertVolumeFraction"
                         default_values="1"
                         name="DownConvertVolumeFraction"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 0, the type of the volume
        fraction is float; is set to 1, the type is unsigned
        char.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetComputeDerivedVariables"
                         default_values="1"
                         name="ComputeDerivedVariables"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, the reader will convert
        derived variables like material density for the materials that the user
        has selected. For Density the user needs to have selected Material Mass
        and Material Volume Fraction.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetDistributeFiles"
                         default_values="1"
                         name="DistributeFiles"
                         number_of_elements="1"
                         panel_visibility="advanced" >
        <BooleanDomain name="bool" />
        <Documentation>In parallel mode, if this property is set to 1, the
        reader will distribute files or blocks.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateLevelArray"
                         default_values="0"
                         name="GenerateLevelArray"
                         number_of_elements="1"
                         panel_visibility="advanced" >
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, a cell array will be
        generated that stores the level of each block.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateActiveBlockArray"
                         default_values="0"
                         name="GenerateActiveBlockArray"
                         number_of_elements="1"
                         panel_visibility="advanced" >
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, a cell array will be
        generated that stores the active status of a block.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateTracerArray"
                         default_values="1"
                         name="GenerateTracers"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, a cell array will be
        generated that stores the coordinates of any tracers.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateMarkers"
                         default_values="1"
                         name="GenerateMarkers"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, a second output will be
        created using the markers data stored in the file.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetGenerateBlockIdArray"
                         default_values="0"
                         name="GenerateBlockIdArray"
                         number_of_elements="1"
                         panel_visibility="advanced" >
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, a cell array will be
        generated that stores a unique blockId for each block.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetMergeXYZComponents"
                         default_values="1"
                         name="MergeXYZComponents"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>If this property is set to 1, cell arrays named (for
        example) X velocity, Y velocity and Z velocity will be combined into a
        single vector array named velocity.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="spct*"
                       file_description="SpyPlot CTH dataset"
                       filename_patterns="spct*" />
      </Hints>
      <!-- End spcthreader-->
    </SourceProxy>
    <SourceProxy class="vtkSpyPlotFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Restarted Sim Spy Plot Reader"
                 name="SPCTHRestartReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads collections of SPCTH files from simulations that were restarted."
                     short_help="Read SPCTH files from simulation restarts.">
                     When a CTH simulation is restarted, typically you get a
                     new set of output files. When you read them in your
                     visualization, you often want to string these file sets
                     together as if it was one continuous dump of files. This
                     reader allows you to specify a metadata file that will
                     implicitly string the files together.</Documentation>
      <OutputPort index="0"
                  name="Volume Data" />
      <OutputPort index="1"
                  name="Tracers" />
      <OutputPort index="2"
                  name="Markers" />
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="sources"
               proxyname="spcthreader" />
        <ExposedProperties>
          <Property name="DownConvertVolumeFraction" />
          <Property name="DistributeFiles" />
          <Property name="GenerateLevelArray" />
          <Property name="GenerateActiveBlockArray" />
          <Property name="GenerateBlockIdArray" />
          <Property name="GenerateTracers" />
          <Property name="GenerateMarkers" />
          <Property name="CellArrayInfo" />
          <Property name="CellArrayStatus" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty animateable="0"
                            command="SetMetaFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This points to a special metadata file that lists the
        output files for each restart.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetUseMetaFile"
                         default_values="1"
                         name="UseMetaFile"
                         number_of_elements="1"
                         panel_visibility="never" >
        <BooleanDomain name="bool" />
        <Documentation>This hidden property must always be set to 1 for this
        proxy to work.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="spcth-timeseries"
                       file_description="Case file for restarted CTH outputs" />
      </Hints>
      <!-- SPCTHRestartReader -->
    </SourceProxy>
    <SourceProxy class="vtkSpyPlotHistoryReader"
                 label="spcth history reader"
                 name="spcthhistoryreader">
      <Documentation long_help="Reads an spcth history file where each row translates into a single time step
        and the columns are points, materials and properties."
                     short_help="Read a comma-separated spctch history file.">
                     </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VRML
        reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetCommentCharacter"
                            default_values="%"
                            name="CommentCharacter"
                            number_of_elements="1">
        <Documentation>This property lists the characters that is used as the
        first character on comment lines</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetDelimeter"
                            default_values=","
                            name="Delimeter"
                            number_of_elements="1">
        <Documentation>Character that is used as the delimeter.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="hscth"
                       file_description="Spy Plot History Files"
                       filename_patterns="*hsct*" />
      </Hints>
      <!-- End of SPCTHHistoryReader -->
    </SourceProxy>
    <SourceProxy class="vtkVRMLSource"
                 label="VRML Reader"
                 name="vrmlreader">
      <Documentation long_help="Load the geometry from a VRML 2.0 file."
                     short_help="Read VRML 2.0 files.">The VRML reader loads
                     only the geometry from a VRML (Virtual Reality Modeling
                     Language) 2.0 file. The expected file extension is .wrl.
                     The output of this reader is a polygonal
                     dataset.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the VRML
        reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="wrl vrml"
                       file_description="VRML 2 Files" />
      </Hints>
      <!-- End vrmlreader -->
    </SourceProxy>
    <SourceProxy class="vtkPLYReader"
                 name="plyreader"
                 base_proxygroup="internal_sources"
                 base_proxyname="PLYReaderCore">
      <Deprecated deprecated_in="5.3" to_remove_in="5.4">
          This has been replaced by "PLYReader" which also supports a series of PLY files.
      </Deprecated>
      <!-- End plyreader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="PLY Reader"
                 name="PLYReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads files stored in Stanford University's PLY polygonal file format."
                     short_help="Read PLY polygonal files.">The PLY reader
                     reads files stored in the PLY polygonal file format
                     developed at Stanford University. The PLY files that
                     ParaView can read must have the elements "vertex" and
                     "face" defined. The "vertex" elements must have the
                     propertys "x", "y", and "z". The "face" elements must have
                     the property "vertex_indices" defined. The default file
                     extension for this reader is .ply.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="PLYReaderCore"></Proxy>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="0"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="ply"
                       file_description="PLY Polygonal File Format" />
      </Hints>
    </SourceProxy>
    <SourceProxy class="vtkPDBReader"
                 label="PDB Reader"
                 name="pdbreader">
      <Documentation long_help="Reads PDB molecule files."
                     short_help="Read PDB files.">The PDB reader reads files in
                     the format used by the Protein Data Bank (an archive of
                     experimentally determined three-dimensional structures of
                     biological macromolecules). The expected file extension is
                     .pdb. The output datasets are polygonal.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the PDB
        reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="pdb"
                       file_description="Protein Data Bank Files" />
      </Hints>
      <!-- End pdbreader -->
    </SourceProxy>
    <SourceProxy class="vtkXYZMolReader2"
                 label="XYZ Reader"
                 name="xyzreader">
      <Documentation long_help="Reads XYZ molecular data files into a polygonal dataset."
                     short_help="Read XYZ molecular data files.">The XYZ reader
                     reads XYZ molecular data files. The expected file
                     extension is .xyz. The output of this reader is a
                     vtkMolecule</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the XYZ
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="xyz"
                       file_description="XMol Molecule Files" />
      </Hints>
      <!-- End xyzreader -->
    </SourceProxy>
    <SourceProxy class="vtkPPhastaReader"
                 label="Phasta Reader"
                 name="PhastaReader">
      <Documentation long_help="Reads the parallel Phasta meta-file and the underlying Phasta files."
                     short_help="Read datasets stored in the Phasta format.">
                     This Phasta reader reads files stored in the Phasta (a CFD
                     package) format. The expected file extension is .pht. The
                     output of this reader is a multipiece data
                     set.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Phasta
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pht"
                       file_description="Phasta Files" />
      </Hints>
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="STL Reader"
                 name="stlreader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads ASCII or binary stereo lithography (STL) files."
                     short_help="Read STL files.">The STL reader reads ASCII or
                     binary stereo lithography (STL) files. The expected file
                     extension is .stl. The output of this reader is a
                     polygonal dataset. This reader also supports file
                     series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="stlreadercore"></Proxy>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="stl"
                       file_description="Stereo Lithography" />
      </Hints>
      <!-- End stlreader-->
    </SourceProxy>
    <SourceProxy class="vtkBYUReader"
                 label="BYU Reader"
                 name="byureader">
      <Documentation long_help="Reads Movie.BYU files to produce polygonal data."
                     short_help="Read Movie.BYU files.">The BYU reader reads
                     data stored in Movie.BYU format. The expected file
                     extension is .g. The datasets resulting from reading these
                     files are polygonal.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the BYU
        reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="g"
                       file_description="BYU Files" />
      </Hints>
      <!-- End byureader -->
    </SourceProxy>
    <SourceProxy class="vtkOBJReader"
                 label="Wavefront OBJ Reader"
                 name="objreader">
      <Documentation long_help="Reads Wavefront .OBJ files to produce polygonal and line data."
                     short_help="Read Wavefront .OBJ files.">The OBJ reader
                     reads data stored in Wavefront .OBJ format. The expected
                     file extension is .obj, the datasets resulting from
                     reading these files are polygons and
                     lines.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the OBJ
        reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="obj"
                       file_description="Wavefront OBJ Files" />
      </Hints>
      <!-- End vtkOBJReader -->
    </SourceProxy>
    <SourceProxy class="vtkGaussianCubeReader2"
                 label="Gaussian Cube Reader"
                 name="gaussiancubereader">
      <Documentation long_help="Produce a vtkMolecule by reading a Gaussian Cube file."
                     short_help="Read Gaussian Cube data files.">The Gaussian
                     Cube reader produces vtkMolecule data by reading data files
                     produced by the Gaussian software package. The expected
                     file extension is .cube.</Documentation>
      <OutputPort index="0"
                  name="Molecule" />
      <OutputPort index="1"
                  name="Gridded Data" />
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Gaussian
        Cube reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="cube"
                       file_description="Gaussian Cube Files" />
      </Hints>
      <!-- End gaussiancubereader -->
    </SourceProxy>
    <SourceProxy class="vtkPVEnSightMasterServerReader2"
                 label="EnSight Master Server Reader"
                 name="ensightMS">
      <Documentation long_help="Reads files in EnSight's Master Server format."
                     short_help="Read parallel EnSight files.">The EnSight
                     Master Server reader reads EnSight's parallel files. The
                     master file ususally has a .sos extension and may point to
                     multiple .case files. The output is a multi-block
                     dataset.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetCaseFileName"
                            name="CaseFileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the name of the .sos file for
        the EnSight Master Server reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetByteOrder"
                         default_values="0"
                         name="ByteOrder"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="BigEndian"
                 value="0" />
          <Entry text="LittleEndian"
                 value="1" />
        </EnumerationDomain>
        <Documentation>This property indicates the byte order of the binary
        file(s).</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty animateable="1"
                            command="SetTimeValue"
                            default_values="0.0"
                            name="SetTimeValue"
                            number_of_elements="1">
        <DoubleRangeDomain name="range" />
        <Documentation>This property indicates which time value to
        read.</Documentation>
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="sos SOS"
                       file_description="EnSight Master Server Files" />
      </Hints>
      <!-- End ensightMS -->
    </SourceProxy>

    <SourceProxy label="Image Reader" name="ImageReader" class="vtkPVImageReader">
      <Documentation long_help="Reads raw regular rectilinear grid data from a file. The dimensions and type of the data must be specified."
                     short_help="Read raw regular rectilinear grid data from a file.">
                     The Image reader reads raw, regular, rectilinear grid
                     (image/volume) data from a file. Because no metadata is
                     provided, the user must specify information about the
                     size, spacing, dimensionality, etc. about the
                     dataset.</Documentation>
      <!-- Unlike most readers, we need to show the "filename" so that users
          can strip off the extension and replace it in the file pattern.
          I'm creating this "Property" hint that has an attribute to force
          whether the given property is shown in the GUI or not. -->
      <Hints>
        <Property name="FilePrefix"
                  show="1" />
        <ReaderFactory extensions="raw"
                       file_description="Raw (binary) Files" />
      </Hints>
      <StringVectorProperty command="SetFilePrefix"
                            name="FilePrefix"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>The text string contained in this property specifies the
        file prefix (directory plus common initial part of file name) for the
        raw binary uniform rectilinear grid dataset.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetFilePattern"
                            default_values="%s"
                            name="FilePattern"
                            number_of_elements="1">
        <Documentation>The text string contained in the property specifies the
        format string to determine the file names necessary for reading this
        dataset. In creating the filenames, %s will be replaced by the prefix
        and %d by a digit which represents the slice number in Z. The format
        string is the same as that used by printf.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetDataScalarType"
                         default_values="4"
                         name="DataScalarType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="char"
                 value="2" />
          <Entry text="unsigned char"
                 value="3" />
          <Entry text="short"
                 value="4" />
          <Entry text="unsigned short"
                 value="5" />
          <Entry text="int"
                 value="6" />
          <Entry text="unsigned int"
                 value="7" />
          <Entry text="long"
                 value="8" />
          <Entry text="unsigned long"
                 value="9" />
          <Entry text="float"
                 value="10" />
          <Entry text="double"
                 value="11" />
        </EnumerationDomain>
        <Documentation>The value of this property indicates the scalar type of
        the pixels/voxels in the file(s): short, int, float ...</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetDataByteOrder"
                         default_values="0"
                         name="DataByteOrder"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="BigEndian"
                 value="0" />
          <Entry text="LittleEndian"
                 value="1" />
        </EnumerationDomain>
        <Documentation>This property indicates the byte order of the binary
        file(s).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetFileDimensionality"
                         default_values="3"
                         name="FileDimensionality"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="2"
                 value="2" />
          <Entry text="3"
                 value="3" />
        </EnumerationDomain>
        <Documentation>This property indicates whether the file(s) in this
        dataset contain slices (2D) or volumes (3D).</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty command="SetDataOrigin"
                            default_values="0.0 0.0 0.0"
                            name="DataOrigin"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>The coordinate contained in this property specifies the
        position of the point with index (0,0,0).</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty command="SetDataSpacing"
                            default_values="1.0 1.0 1.0"
                            name="DataSpacing"
                            number_of_elements="3">
        <DoubleRangeDomain name="range" />
        <Documentation>This property specifies the size of a voxel in each
        dimension.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty command="SetDataExtent"
                         default_values="0 0 0 0 0 0"
                         name="DataExtent"
                         number_of_elements="6">
        <IntRangeDomain name="range" />
        <Documentation>This property specifies the minimum and maximum index
        values of the data in each dimension (xmin, xmax, ymin, ymax, zmin,
        zmax).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetNumberOfScalarComponents"
                         default_values="1"
                         name="NumberOfScalarComponents"
                         number_of_elements="1">
        <IntRangeDomain name="range" />
        <Documentation>This property specifies the number of components the
        scalar value at each pixel or voxel has (e.g., RGB - 3 scalar
        components).</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="SetScalarArrayName"
                            default_values="ImageFile"
                            name="ScalarArrayName"
                            number_of_elements="1">
        <Documentation>This property contains a text string listing a name to
        assign to the point-centered data array read.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetFileLowerLeft"
                         default_values="1"
                         name="FileLowerLeft"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property determines whether the data originates in
        the lower left corner (on) or the upper left corner (off). Most
        scientific data is written with a right-handed axes that originates in
        the lower left corner. However, several 2D image file formats write the
        image from the upper left corner.</Documentation>
      </IntVectorProperty>
      <!-- End ImageReader -->
    </SourceProxy>
    <SourceProxy class="vtkNrrdReader"
                 label="Nrrd Reader"
                 name="NrrdReader">
      <Documentation long_help="Reads raw image files with Nrrd meta data."
                     short_help="Read raw image files with Nrrd meta data.">The
                     Nrrd reader reads raw image data much like the Raw Image
                     Reader except that it will also read metadata information
                     in the Nrrd format. This means that the reader will
                     automatically set information like file dimensions. There
                     are several limitations on what type of nrrd files we can
                     read. This reader only supports nrrd files in raw format.
                     Other encodings like ascii and hex will result in errors.
                     When reading in detached headers, this only supports
                     reading one file that is detached.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>The name of the file to read (or the meta data file that
        will point to the actual file).</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetDataVOI"
                         default_values="0 0 0 0 0 0"
                         label="Data VOI"
                         name="DataVOI"
                         number_of_elements="6">
        <Documentation>The data volume of interest (VOI). The VOI is a
        sub-extent of the data that you want loaded. Setting a VOI is useful
        when reading from a large data set and you are only interested in a
        small portion of the data. If left containing all 0's, then the reader
        will load in the entire data set.</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="nrrd nhdr"
                       file_description="Nrrd Raw Image Files" />
      </Hints>
    </SourceProxy>
    <!-- NrrdReader -->
    <SourceProxy label="DICOM Reader (Single File)"
                 name="DICOMReaderSingle"
                 class="vtkDICOMImageReader">
      <Documentation long_help="Reads DICOM regular rectilinear grid data from a lone file."
                     short_help="Reads DICOM file">
        DICOM is a file format often used in medical imaging. This version
        of the reader reads a single file (as opposed to a collection of
        files). The DICOM reader currently only supports uncompressed
        files.
      </Documentation>
      <Hints>
        <ReaderFactory extensions="dcm"
                       file_description="DICOM Files (single)" />
      </Hints>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>
          DICOM file to load. This version of the reader only supports
          loading one file at a time.
        </Documentation>
      </StringVectorProperty>
    </SourceProxy>
    <!-- End DICOMReaderSingle -->
    <SourceProxy label="DICOM Reader (directory)"
                 name="DICOMReader"
                 class="vtkDICOMImageReader">
      <Documentation long_help="Reads DICOM regular rectilinear grid data from a directory containing a file."
                     short_help="Reads DICOM files.">
        DICOM is a file format often used in medical imaging. This version
        of the reader will look at all files in the same directory of the
        selected file and load them as planes of the same data set. It is
        typically for 3D medical scanners to store planes as set of files
        in a directory.
      </Documentation>
      <Hints>
        <ReaderFactory extensions="dcm"
                       file_description="DICOM Files (directory)" />
      </Hints>
      <StringVectorProperty animateable="0"
                            command="SetDirectoryName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>
          A file in the directory of files to be loaded. The DICOM reader
          will actually load all valid DICOM files in the same directory as
          this file as part of the same dataset. This is typical of how
          DICOM files are often stored.
        </Documentation>
        <Hints>
          <UseDirectoryName />
        </Hints>
      </StringVectorProperty>
    </SourceProxy>
      <!-- End DICOMReaderDirectory -->
    <SourceProxy class="vtkImageFileSeriesReader"
                 file_name_method="SetFileName"
                 label="PNG Series Reader"
                 name="PNGSeriesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a PNG file into an image data."
                     short_help="Read a PNG file.">The PNG reader reads PNG
                     (Portable Network Graphics) files, and the output is a
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .png.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty name="ReadAsImageStack"
                         command="SetReadAsImageStack"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, the reader will read the set of files as an image stack, rather than
          a temporal file series.
        </Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="PNGReader"></Proxy>
        <ExposedProperties>
          <Property name="DataSpacing" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="png"
                       file_description="PNG Image Files" />
      </Hints>
      <!-- End PNGSeriesReader -->
    </SourceProxy>
    <SourceProxy class="vtkImageFileSeriesReader"
                 file_name_method="SetFileName"
                 label="JPEG Series Reader"
                 name="JPEGSeriesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a series of JPEG files into an time sequence of image datas."
                     short_help="Read a series of JPEG files.">The JPEG series
                     reader reads JPEG files. The output is a time sequence of
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .jpg or .jpeg.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty name="ReadAsImageStack"
                         command="SetReadAsImageStack"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, the reader will read the set of files as an image stack, rather than
          a temporal file series.
        </Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="JPEGReader"></Proxy>
        <ExposedProperties>
          <Property name="DataSpacing" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="jpg jpeg"
                       file_description="JPEG Image Files" />
      </Hints>
      <!-- End JPEGSeriesReader -->
    </SourceProxy>
    <SourceProxy class="vtkImageFileSeriesReader"
                 file_name_method="SetFileName"
                 label="MRC Series Reader"
                 name="MRCSeriesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a series of MRC files into an time sequence of image datas."
                     short_help="Read a series of MRC files.">The MRC series
                     reader reads MRC files. The output is a time sequence of
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .mrc but .ali, .st and .rec are also
                     recognized.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="MRCReader"></Proxy>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="mrc ali st rec"
                       file_description="MRC Image Files" />
      </Hints>
      <!-- End MRCSeriesReader -->
    </SourceProxy>
    <SourceProxy class="vtkImageFileSeriesReader"
                 file_name_method="SetFileName"
                 label="TIFF Series Reader"
                 name="TIFFSeriesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a series of TIFF files into an time sequence of image datas."
                     short_help="Read a series of TIFF files.">The TIFF series
                     reader reads TIFF files. The output is a time sequence of
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .tif or .tiff.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <IntVectorProperty name="ReadAsImageStack"
                         command="SetReadAsImageStack"
                         number_of_elements="1"
                         default_values="1">
        <BooleanDomain name="bool" />
        <Documentation>
          When set, the reader will read the set of files as an image stack, rather than
          a temporal file series.
        </Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="TIFFReader"></Proxy>
        <ExposedProperties>
          <Property name="UseCustomDataSpacing" />
          <Property name="CustomDataSpacing" />
          <Property name="CustomDataSpacingInfo" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="tif tiff"
                       file_description="TIFF Image Files" />
      </Hints>
      <!-- End TIFFSeriesReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="XDMF Reader"
                 name="XdmfReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads XDMF (eXtensible Data Model and Format) files."
                     short_help="Read XDMF data files.">The XDMF reader reads
                     files in XDMF format. The expected file extension is .xmf.
                     Metadata is stored in the XDMF file using an XML format,
                     and large attribute arrays are stored in a corresponding
                     HDF5 file. The output may be unstructured grid, structured
                     grid, or rectiliner grid. See http://www.xdmf.org for a
                     description of the file format.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="XdmfReaderCore" />
        <ExposedProperties>
          <Property name="PointArrayInfo" />
          <Property name="PointArrayStatus" />
          <Property name="CellArrayInfo" />
          <Property name="CellArrayStatus" />
          <Property name="SetInfo" />
          <Property name="SetStatus" />
          <Property name="GridInfo" />
          <Property name="GridStatus" />
          <Property name="Stride" />
          <Property name="SILTimeStamp" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileNames"
                            number_of_elements="0"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="xmf xdmf"
                       file_description="Xdmf Reader" />
      </Hints>
      <!-- End of XdmfReader -->
    </SourceProxy>

    <SourceProxy class="vtkExodusFileSeriesReader"
                 file_name_method="SetFileName"
                 name="ExodusIIReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads an Exodus II file to produce an unstructured grid."
                     short_help="Read Exodus II files.">The Exodus reader loads
                     Exodus II files and produces an unstructured grid output.
                     The default file extensions are .g, .e, .ex2, .ex2v2,
                     .exo, .gen, .exoII, .exii, .0, .00, .000, and .0000. The
                     file format is described fully at:
                     http://endo.sandia.gov/SEACAS/Documentation/exodusII.pdf.
                     Each Exodus file contains a single set of points with 2-D
                     or 3-D coordinates plus one or more blocks, sets, and
                     maps. Block group elements (or their bounding edges or
                     faces) of the same type together. Sets select subsets
                     (across all the blocks in a file) of elements, sides of
                     elements (which may be of mixed dimensionality), bounding
                     faces of volumetric elements, or bounding edges of
                     volumetric or areal elements. Each block or set may have
                     multiple result variables, each of which defines a value
                     per element, per timestep. The elements (cells), faces of
                     elements (when enumerated in face blocks), edges of
                     elements (when enumerated in edge blocks), and nodes
                     (points) in a file may be assigned an arbitrary integer
                     number by an element map, face map, edge map, or node map,
                     respectively. Usually, only a single map of each type
                     exists and is employed to assign a unique global ID to
                     entities across multiple files which partition a large
                     mesh for a distributed-memory calculation. However here
                     may be multiply maps of each type and there are no
                     constraints which force the integers to be unique. The
                     connectivity of elements is constant across all of the
                     timesteps in any single Exodus II file. However, multiple
                     files which specify a single time-evolution of a mesh may
                     be used to represent meshes which exhibit changes in
                     connectivity infrequently. Field variable mode_shape[0]
                     represents the time step (t_index) if HasModeShapes is
                     not set or the ModeShape otherwise.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="ExodusIIReaderCore" />
        <ExposedProperties>
          <PropertyGroup label="Variables"
                         name="Variables"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="GenerateObjectIdCellArray" />
            <Property name="GenerateGlobalElementIdArray" />
            <Property name="ElementVariables" />
            <Property name="FaceVariables" />
            <Property name="EdgeVariables" />
            <Property name="SideSetResultArrayStatus" />
            <Property name="NodeSetResultArrayStatus" />
            <Property name="FaceSetResultArrayStatus" />
            <Property name="EdgeSetResultArrayStatus" />
            <Property name="GenerateGlobalNodeIdArray" />
            <Property name="ElementSetResultArrayStatus" />
            <Property name="PointVariables" />
            <Property name="GlobalVariables" />
            <Hints>
              <WidgetHeight number_of_rows="20" />
            </Hints>
          </PropertyGroup>
          <!-- fixme - need to group these two properties -->
          <Property name="ApplyDisplacements" />
          <Property name="DisplacementMagnitude" />
          <Property name="EdgeBlocks" />
          <Property name="EdgeBlocksInfo" />
          <PropertyGroup label="Sets"
                         name="Sets"
                         panel_visibility="advanced"
                         panel_widget="ArrayStatus">
            <Property name="NodeSetArrayStatus" />
            <Property name="SideSetArrayStatus" />
            <Property name="FaceSetArrayStatus" />
            <Property name="EdgeSetArrayStatus" />
            <Property name="ElementSetArrayStatus" />
          </PropertyGroup>
          <PropertyGroup label="Maps"
                         name="Maps"
                         panel_visibility="advanced"
                         panel_widget="ArrayStatus">
            <Property name="NodeMapArrayStatus" />
            <Property name="EdgeMapArrayStatus" />
            <Property name="FaceMapArrayStatus" />
            <Property name="ElementMapArrayStatus" />
          </PropertyGroup>
          <Property name="EdgeMapInfo" />
          <Property name="EdgeSetInfo" />
          <Property name="EdgeSetResultArrayInfo" />
          <Property name="EdgeVariablesInfo" />
          <Property name="ElementBlocks" />
          <Property name="ElementMapInfo" />
          <Property name="ElementSetInfo" />
          <Property name="ElementSetResultArrayInfo" />
          <Property name="ElementVariablesInfo" />
          <Property name="FaceBlocks" />
          <Property name="FaceBlocksInfo" />
          <Property name="FaceMapInfo" />
          <Property name="FaceSetInfo" />
          <Property name="FaceSetResultArrayInfo" />
          <Property name="FaceVariablesInfo" />
          <Property name="GlobalVariablesInfo" />
          <Property name="NodeMapInfo" />
          <Property name="NodeSetInfo" />
          <Property name="NodeSetResultArrayInfo" />
          <Property name="PointVariablesInfo" />
          <Property name="SideSetInfo" />
          <Property name="SideSetResultArrayInfo" />
          <Property name="SILUpdateStamp" />
          <PropertyGroup label="Mode Shapes">
            <Property name="HasModeShapes" panel_visibility="advanced" />
            <Property name="ModeShape" panel_visibility="advanced" />
            <Property name="AnimateVibrations" panel_visibility="advanced" />
            <Property name="ModeShapesRangeInfo" />
          </PropertyGroup>
          <PropertyGroup label="File Pattern">
            <Property name="FilePrefix" panel_visibility="advanced" />
            <Property name="FilePrefixInfo" />
            <Property name="FilePattern" panel_visibility="advanced"/>
            <Property name="FilePatternInfo" />
            <Property name="FileRange" panel_visibility="advanced" />
            <Property name="FileRangeInfo" />
            <Property name="XMLFileName" panel_visibility="advanced"/>
            <Property name="XMLFileNameInfo" />
          </PropertyGroup>
          <Property name="GenerateFileIdArray" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Exodus
        reader.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetUseMetaFile"
                         default_values="0"
                         name="UseMetaFile"
                         number_of_elements="1"
                         panel_visibility="never" >
        <BooleanDomain name="bool" />
        <Documentation>This hidden property must always be set to 1 for this
        proxy to work.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="g e ex2 ex2v2 exo gen exoII exii"
                       file_description="ExodusII"
                       filename_patterns="*e-s*" />
      </Hints>
      <!-- ExodusIIReader -->
    </SourceProxy>
    <SourceProxy class="vtkExodusFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Restarted Sim Exodus Reader"
                 name="ExodusRestartReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads collections of Exodus output files from simulations that were restarted."
                     short_help="Read Exodus files from simulation restarts.">
                     When a simulation that outputs exodus files is restarted,
                     typically you get a new set of output files. When you read
                     them in your visualization, you often want to string these
                     file sets together as if it was one continuous dump of
                     files. This reader allows you to specify a metadata file
                     that will implicitly string the files
                     together.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="ExodusIIReaderCore" />
        <ExposedProperties>
          <PropertyGroup label="Variables"
                         name="Variables"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="GenerateObjectIdCellArray" />
            <Property name="GenerateGlobalElementIdArray" />
            <Property name="ElementVariables" />
            <Property name="FaceVariables" />
            <Property name="EdgeVariables" />
            <Property name="SideSetResultArrayStatus" />
            <Property name="NodeSetResultArrayStatus" />
            <Property name="FaceSetResultArrayStatus" />
            <Property name="EdgeSetResultArrayStatus" />
            <Property name="GenerateGlobalNodeIdArray" />
            <Property name="ElementSetResultArrayStatus" />
            <Property name="PointVariables" />
            <Property name="GlobalVariables" />
          </PropertyGroup>
          <!-- fixme - need to group these two properties -->
          <Property name="ApplyDisplacements" />
          <Property name="DisplacementMagnitude" />
          <Property name="EdgeBlocks" />
          <Property name="EdgeBlocksInfo" />
          <PropertyGroup label="Sets"
                         name="Sets"
                         panel_visibility="advanced"
                         panel_widget="ArrayStatus">
            <Property name="NodeSetArrayStatus" />
            <Property name="SideSetArrayStatus" />
            <Property name="FaceSetArrayStatus" />
            <Property name="EdgeSetArrayStatus" />
            <Property name="ElementSetArrayStatus" />
          </PropertyGroup>
          <PropertyGroup label="Maps"
                         name="Maps"
                         panel_visibility="advanced"
                         panel_widget="ArrayStatus">
            <Property name="NodeMapArrayStatus" />
            <Property name="EdgeMapArrayStatus" />
            <Property name="FaceMapArrayStatus" />
            <Property name="ElementMapArrayStatus" />
          </PropertyGroup>
          <Property name="EdgeMapInfo" />
          <Property name="EdgeSetInfo" />
          <Property name="EdgeSetResultArrayInfo" />
          <Property name="EdgeVariablesInfo" />
          <Property name="ElementBlocks" />
          <Property name="ElementMapInfo" />
          <Property name="ElementSetInfo" />
          <Property name="ElementSetResultArrayInfo" />
          <Property name="ElementVariablesInfo" />
          <Property name="FaceBlocks" />
          <Property name="FaceBlocksInfo" />
          <Property name="FaceMapInfo" />
          <Property name="FaceSetInfo" />
          <Property name="FaceSetResultArrayInfo" />
          <Property name="FaceVariablesInfo" />
          <Property name="GlobalVariablesInfo" />
          <Property name="NodeMapInfo" />
          <Property name="NodeSetInfo" />
          <Property name="NodeSetResultArrayInfo" />
          <Property name="PointVariablesInfo" />
          <Property name="SideSetInfo" />
          <Property name="SideSetResultArrayInfo" />
          <Property name="SILUpdateStamp" />
          <PropertyGroup label="Mode Shapes">
            <Property name="HasModeShapes" panel_visibility="advanced" />
            <Property name="ModeShape" panel_visibility="advanced" />
            <Property name="AnimateVibrations" panel_visibility="advanced" />
            <Property name="ModeShapesRangeInfo" />
          </PropertyGroup>
          <PropertyGroup label="File Pattern">
            <Property name="FilePrefix" panel_visibility="advanced"/>
            <Property name="FilePrefixInfo" />
            <Property name="FilePattern" panel_visibility="advanced"/>
            <Property name="FilePatternInfo" />
            <Property name="FileRange" panel_visibility="advanced"/>
            <Property name="FileRangeInfo" />
            <Property name="XMLFileName" panel_visibility="advanced"/>
            <Property name="XMLFileNameInfo" />
          </PropertyGroup>
          <Property name="GenerateFileIdArray" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetMetaFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This points to a special metadata file that lists the
        output files for each restart.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetUseMetaFile"
                         default_values="1"
                         name="UseMetaFile"
                         number_of_elements="1"
                         panel_visibility="never"
                         >
        <BooleanDomain name="bool" />
        <Documentation>This hidden property must always be set to 1 for this
        proxy to work.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="ex-timeseries"
                       file_description="Metafile for restarted exodus outputs" />
      </Hints>
      <!-- ExodusRestartReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="AVS UCD Reader"
                 name="AVSucdSeriesReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads binary or ASCII files stored in AVS UCD format."
                     short_help="Read a dataset in AVS UCD format.">The AVS UCD
                     reader reads binary or ASCII files stored in AVS UCD
                     format. The default file extension is .inp. The output of
                     this reader is unstructured grid. This supports reading a
                     file series.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="AVSucdReader"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="Cell/Point Array Status"
                         name="CellPointArrayStatus"
                         panel_visibility="default"
                         panel_widget="ArrayStatus">
            <Property name="CellArrayInfo" />
            <Property name="CellArrayStatus" />
            <Property name="PointArrayInfo" />
            <Property name="PointArrayStatus" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. If more than
        one file is specified, the reader will switch to file series mode in
        which it will pretend that it can support time and provide one file per
        time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="inp"
                       file_description="AVS UCD Binary/ASCII Files" />
      </Hints>
      <!-- End of AVSucdSeriesReader -->
    </SourceProxy>
    <SourceProxy class="vtkFacetReader"
                 name="FacetReader">
      <Documentation long_help="Reads ASCII files stored in Facet format."
                     short_help="Read a dataset in Facet format.">The Facet
                     Reader reads files in Facet format: a simple ASCII file
                     format listing point coordinates and connectivity between
                     these points. The default file extension is .facet. The
                     output of the Facet Reader is polygonal.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the Facet
        reader.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="facet"
                       file_description="Facet Polygonal Data Files" />
      </Hints>
      <!-- End Facet Reader -->
    </SourceProxy>
    <SourceProxy class="vtkTIFFReader"
                 label="TIFF Reader"
                 name="TIFFReader">
      <Documentation long_help="Reads a TIFF file into an image data."
                     short_help="Read a TIFF file.">The TIFF reader reads TIFF
                     (Tagged Image File Format) files, and the output is a
                     uniform rectilinear (image/volume) dataset. The default
                     file extension is .tiff.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never" >
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the TIFF
        reader.</Documentation>
      </StringVectorProperty>
      <!-- this deliberately doesn't have ReaderFactory hints
           TIFFSeriesReader can actually read whatever this reader reads. This is here
           only for backward compatibility.  -->
      <!-- End TIFFReader -->
    </SourceProxy>
    <!-- Beginning of OpenFOAM Reader -->
    <SourceProxy class="vtkPOpenFOAMReader"
                 name="OpenFOAMReader">
      <Documentation long_help="Reads OpenFOAM data files, producing multi-block dataset."
                     short_help="Read OpenFOAM data files.">The OpenFOAM reader
                     reads OpenFOAM data files and outputs multi-block
                     datasets. Mesh information and time dependent data are
                     supported. The OpenFOAM format is described fully at
                     http://www.openfoam.com/docs/user/basic-file-format.php</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="advanced">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name for the
        reader.</Documentation>
      </StringVectorProperty>
      <Property animateable="0"
                command="SetRefresh"
                name="Refresh">
        <Documentation>Refresh time information and selection list metadata.
        Useful when watching a running simulation.</Documentation>
      </Property>
      <IntVectorProperty animateable="0"
                         command="SetSkipZeroTime"
                         default_values="1"
                         name="SkipZeroTime"
                         label="Skip Zero Time"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Ignore the 0/ time directory.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetCaseType"
                         default_values="1"
                         name="CaseType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Decomposed Case"    value="0" />
          <Entry text="Reconstructed Case" value="1" />
        </EnumerationDomain>
        <Documentation>The property indicates whether decomposed mesh or
        reconstructed mesh should be read</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetUse64BitLabels"
                         default_values="0"
                         label="Label Size"
                         name="Use64BitLabels"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="32-bit" value="0" />
          <Entry text="64-bit" value="1" />
        </EnumerationDomain>
        <Documentation>The expected label-size for the OpenFOAM data.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetUse64BitFloats"
                         default_values="1"
                         label="Scalar Size"
                         name="Use64BitFloats"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="32-bit (SP)" value="0" />
          <Entry text="64-bit (DP)" value="1" />
        </EnumerationDomain>
        <Documentation>The expected scalar-size for the OpenFOAM data.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetCreateCellToPoint"
                         default_values="1"
                         label="Create cell-to-point filtered data"
                         name="CreateCellToPoint"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Create point data from cell data. Beware: the filter
        does not do inverse distance weighting.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetAddDimensionsToArrayNames"
                         default_values="0"
                         label="Add dimensional units to array names"
                         name="AddDimensionsToArrayNames"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Read dimensional units from field data and add them to
        array names as human-readable string.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PatchArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Patch" />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetPatchArrayStatus"
                            element_types="2 0"
                            information_property="PatchArrayInfo"
                            name="MeshRegions"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PatchArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            name="CellArrays"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            name="PointArrays"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="LagrangianArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Lagrangian" />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            command="SetLagrangianArrayStatus"
                            element_types="2 0"
                            information_property="LagrangianArrayInfo"
                            name="LagrangianArrays"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="LagrangianArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetCacheMesh"
                         default_values="1"
                         label="Cache mesh"
                         name="CacheMesh"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>Cache the OpenFOAM mesh between GUI selection
        changes.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetDecomposePolyhedra"
                         default_values="1"
                         label="Decompose polyhedra"
                         name="DecomposePolyhedra"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>Decompose polyhedra into tetrahedra and
        pyramids.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetListTimeStepsByControlDict"
                         default_values="0"
                         label="List timesteps according to controlDict"
                         name="ListTimeStepsByControlDict"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>List time directories listed according to the settings
        in controlDict.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetPositionsIsIn13Format"
                         default_values="1"
                         label="Lagrangian positions without extra data"
                         name="PositionsIsIn13Format"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <BooleanDomain name="bool" />
        <Documentation>Lagrangian positions without extra data (before OpenFOAM 1.4, after 2.4)</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetReadZones"
                         default_values="0"
                         label="Read zones"
                         name="ReadZones"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Read point/face/cell-Zones?</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="foam"
          file_description="OpenFOAM" />
        <ReloadFiles property="Refresh" />
      </Hints>
    </SourceProxy>
    <!-- End of OpenFOAM Reader -->
    <!-- Beginning of MFIX Reader -->
    <SourceProxy class="vtkMFIXReader"
                 name="MFIXReader">
      <Documentation long_help="Reads a dataset in MFIX file format."
                     short_help="Reads a dataset in MFIX file format.">
                     vtkMFIXReader creates an unstructured grid dataset. It
                     reads a restart file and a set of sp files. The restart
                     file contains the mesh information. MFIX meshes are either
                     cylindrical or rectilinear, but this reader will convert
                     them to an unstructured grid. The sp files contain
                     transient data for the cells. Each sp file has one or more
                     variables stored inside it.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>Set the file name for the MFIX reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="RES"
                       file_description="MFIX Unstructured Grid Files" />
      </Hints>
    </SourceProxy>
    <!-- End of MFIX Reader -->
    <!-- Beginning of FLUENT Reader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Fluent Case Reader"
                 name="FLUENTReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a dataset in Fluent file format."
                     short_help="Reads a dataset in Fluent file format.">
                     FLUENTReader creates an unstructured grid dataset. It
                     reads .cas and .dat files stored in FLUENT native format
                     (or a file series of the same.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The name of the files to load.</Documentation>
      </StringVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="FLUENTReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="CellArrayInfo" />
          <Property name="CellArrayStatus" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="cas"
                       file_description="Fluent Case Files" />
      </Hints>
    </SourceProxy>
    <!-- End of FLUENT Reader -->
    <!-- Beginning of ProStar Reader -->
    <SourceProxy class="vtkProStarReader"
                 label="proSTAR (STARCD) Reader"
                 name="ProStarReader">
      <Documentation long_help="Reads geometry in proSTAR (STARCD) file format."
                     short_help="Reads geometry in proSTAR (STARCD) file format.">
                     ProStarReader creates an unstructured grid dataset. It
                     reads .cel/.vrt files stored in proSTAR (STARCD) ASCII
                     format.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>Set the file name for the proSTAR (STARCD)
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty animateable="0"
                            command="SetScaleFactor"
                            default_values="1"
                            name="ScaleFactor"
                            number_of_elements="1">
        <Documentation>Scaling factor for the points</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="cel vrt"
                       file_description="proSTAR Files" />
      </Hints>
    </SourceProxy>
    <!-- End of ProStar Reader -->
    <!-- Beginning of LSDyna Reader -->
    <SourceProxy class="vtkPLSDynaReader"
                 name="LSDynaReader">
      <Documentation long_help="Read LS-Dyna databases (d3plot)."
                     short_help="Read LS-Dyna databases (d3plot).">This reader
                     reads LS-Dyna databases.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>Set the file name for the LSDyna reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="SolidArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Solid" />
      </StringVectorProperty>
      <StringVectorProperty command="SetSolidArrayStatus"
                            element_types="2 0"
                            information_property="SolidArrayInfo"
                            label="Solid Arrays"
                            name="SolidArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="SolidArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which solid arrays to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ThickShellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="ThickShell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetThickShellArrayStatus"
                            element_types="2 0"
                            information_property="ThickShellArrayInfo"
                            label="Thick Shell Arrays"
                            name="ThickShellArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ThickShellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which thick shell arrays to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ShellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Shell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetShellArrayStatus"
                            element_types="2 0"
                            information_property="ShellArrayInfo"
                            label="Shell Arrays"
                            name="ShellArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ShellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which shell arrays to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="RigidBodyArrayInfo">
        <ArraySelectionInformationHelper attribute_name="RigidBody" />
      </StringVectorProperty>
      <StringVectorProperty command="SetRigidBodyArrayStatus"
                            element_types="2 0"
                            information_property="RigidBodyArrayInfo"
                            label="Rigid Body Arrays"
                            name="RigidBodyArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="RigidBodyArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which rigid body arrays to load.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="RoadSurfaceArrayInfo">
        <ArraySelectionInformationHelper attribute_name="RoadSurface" />
      </StringVectorProperty>
      <StringVectorProperty command="SetRoadSurfaceArrayStatus"
                            element_types="2 0"
                            information_property="RoadSurfaceArrayInfo"
                            label="Road Surface Arrays"
                            name="RoadSurfaceArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="RoadSurfaceArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which road surface arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="BeamArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Beam" />
      </StringVectorProperty>
      <StringVectorProperty command="SetBeamArrayStatus"
                            element_types="2 0"
                            information_property="BeamArrayInfo"
                            label="Beam Arrays"
                            name="BeamArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="BeamArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which beam arrays to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="ParticleArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Particle" />
      </StringVectorProperty>
      <StringVectorProperty command="SetParticleArrayStatus"
                            element_types="2 0"
                            information_property="ParticleArrayInfo"
                            label="Particle Arrays"
                            name="ParticleArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="ParticleArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which particle arrays to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PartArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Part" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPartArrayStatus"
                            element_types="2 0"
                            information_property="PartArrayInfo"
                            label="Part Arrays"
                            name="PartArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PartArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select which part arrays to read.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetDeformedMesh"
                         default_values="1"
                         name="DeformedMesh"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should the mesh be deformed over time (if the Deflection
        node array is set to load)?</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetRemoveDeletedCells"
                         default_values="1"
                         name="RemoveDeletedCells"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>Should cells that have been deleted (failed
        structurally, for example) be removed from the mesh?</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="k lsdyna d3plot"
                       file_description="LSDyna"
                       filename_patterns="d3plot" />
      </Hints>
    </SourceProxy>
    <!-- End of LSDyna Reader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="NetCDF Reader"
                 name="netCDFReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads regular arrays from netCDF files. Will also read any topological information specified by the COARDS and CF conventions."
                     short_help="Read regular arrays from netCDF files.">Reads
                     arrays from netCDF files into structured VTK data sets. In
                     the absence of any other information, the files will be
                     read as image data. This reader will also look for meta
                     information specified by the CF convention that specify
                     things like topology and time. This information can cause
                     the output to be a nonuniform rectilinear grid or
                     curvilinear (structured) grid. Details on the CF
                     convention can be found at http://cf-pcmdi.llnl.gov/. It
                     should be noted that the CF convention is a superset of
                     the COARDS convention, so COARDS conventions will also be
                     recognized.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The name of the files to load.</Documentation>
      </StringVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="netCDFReaderCore" />
        <ExposedProperties>
          <Property name="DimensionInfo" />
          <Property name="Dimensions" />
          <Property name="VariableDimensionInfo" />
          <Property name="VariableArrayInfo" />
          <Property name="SphericalCoordinates" />
          <Property name="VerticalScale" />
          <Property name="VerticalBias" />
          <Property name="ReplaceFillValueWithNan" />
          <Property name="OutputType" />
        </ExposedProperties>
      </SubProxy>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>This magic property sends time information to the
        animation panel. ParaView will then automatically set up the animation
        to visit the time steps defined in the file.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="ncdf nc"
                       file_description="netCDF files generic and CF conventions" />
      </Hints>
    </SourceProxy>
    <!-- netCDFReader -->
    <SourceProxy class="vtkPSLACReader"
                 label="SLAC Data Reader"
                 name="SLACReader">
      <Documentation short_help="A reader for a data format used by
      Omega3p, Tau3p, and several other tools used at the Standford
      Linear Accelerator Center (SLAC)">A reader for a data format
      used by Omega3p, Tau3p, and several other tools used at the
      Standford Linear Accelerator Center (SLAC). The underlying
      format uses netCDF to store arrays, but also imposes several
      conventions to form an unstructured grid of
      elements.</Documentation>
      <OutputPort index="0"
                  name="External Surface" />
      <OutputPort index="1"
                  name="Entire Volume" />
      <StringVectorProperty animateable="0"
                            command="SetMeshFileName"
                            name="MeshFileName"
                            number_of_elements="1">
        <FileListDomain name="files" />
        <Documentation>The name of the mesh file to load.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllModeFileNames"
                            command="AddModeFileName"
                            name="ModeFileName"
                            number_of_elements="1"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The name of the mode files to load. The points in the
        mode file should be the same as the mesh file.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetReadInternalVolume"
                         default_values="0"
                         name="ReadInternalVolume"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If on, read the internal volume of the data
        set.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetReadExternalSurface"
                         default_values="1"
                         name="ReadExternalSurface"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If on, read the external surfaces of the data
        set.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetReadMidpoints"
                         default_values="0"
                         name="ReadMidpoints"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>If on, reads midpoint information for external surfaces
        and builds quadratic surface triangles.</Documentation>
      </IntVectorProperty>
      <!--       <StringVectorProperty name="VariableArrayStatus" -->
      <!--                             command="SetVariableArrayStatus" -->
      <!--                             number_of_elements="0" -->
      <!--                             repeat_command="1" -->
      <!--                             number_of_elements_per_command="2" -->
      <!--                             element_types="2 0" -->
      <!--                             information_property="VariableArrayInfo" -->
      <!--                             label="Variables"> -->
      <!--         <ArraySelectionDomain name="array_list"> -->
      <!--           <RequiredProperties> -->
      <!--             <Property name="VariableArrayInfo" function="ArrayList" /> -->
      <!--           </RequiredProperties> -->
      <!--         </ArraySelectionDomain> -->
      <!--         <Documentation> -->
      <!--           This property lists which mode variables to load from the mode file. -->
      <!--         </Documentation> -->
      <!--       </StringVectorProperty> -->
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>This magic property sends time information to the
        animation panel. ParaView will then automatically set up the animation
        to visit the time steps defined in the file.</Documentation>
      </DoubleVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimeRange">
        <TimeRangeInformationHelper />
        <Documentation>This magic property sends time range information to the
        animation panel. ParaView uses this information to set the range of
        time for the animation. This property is important for when there are
        no timesteps but you still want to give ParaView a range of values to
        use.</Documentation>
      </DoubleVectorProperty>

      <DoubleVectorProperty name="FrequencyScale"
                            command="SetFrequencyScale"
                            clean_command="ResetFrequencyScales"
                            information_property="FrequencyScaleInfo"
                            number_of_elements_per_command="1"
                            repeat_command="1"
                            use_index="1"
                            panel_visibility="advanced"
                            panel_widget="list" >
        <Documentation>
          Sets the scale factor for each mode. By default, each scale factor is
          set to 1.
        </Documentation>
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>

      <DoubleVectorProperty command="GetFrequencyScales"
                            information_only="1"
                            name="FrequencyScaleInfo"
                            si_class="vtkSIDataArrayProperty" >
      </DoubleVectorProperty>

      <DoubleVectorProperty name="PhaseShift"
                            command="SetPhaseShift"
                            clean_command="ResetPhaseShifts"
                            information_property="PhaseShiftInfo"
                            number_of_elements_per_command="1"
                            repeat_command="1"
                            use_index="1"
                            panel_visibility="advanced"
                            panel_widget="list" >
        <Documentation>
          Sets the phase offset for each mode. By default, shift is set to 0.
        </Documentation>
        <DoubleRangeDomain name="range" />
      </DoubleVectorProperty>

      <DoubleVectorProperty command="GetPhaseShifts"
                            information_only="1"
                            name="PhaseShiftInfo"
                            si_class="vtkSIDataArrayProperty" >
      </DoubleVectorProperty>


      <Hints>
        <ReaderFactory extensions="ncdf nc"
                       file_description="SLAC Mesh Files" />
        <!-- Usually you want to look at the external surface, but the
             volume is there for visualizing the internal fields. -->
        <OutputPort index="1"
                    visible="0" />
      </Hints>
    </SourceProxy>
    <!-- SLACReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="SLAC Particle Data Reader"
                 name="SLACParticleReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation short_help="The SLAC Particle data reader.">The SLAC Particle data reader.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="SLACParticleReaderCore"></Proxy>
      </SubProxy>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>A list of files to be read in a time
        series.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="ncdf netcdf"
                       file_description="SLAC Particle Files" />
      </Hints>
    </SourceProxy>
    <!-- SLACParticleReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="CSV Reader"
                 name="CSVReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads a Delimited Text values file into a 1D rectilinear grid."
                     short_help="Read a Delimited Text values file.">The CSV
                     reader reads a Delimited Text values file into a 1D
                     rectilinear grid. If the file was saved using the
                     CSVWriter, then the rectilinear grid's points and point
                     data can be restored as well as the cell data. Otherwise
                     all the data in the CSV file is treated as cell data. The
                     default file extension is .csv as well as .txt.
                     This can read file series as well.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the reader. Each file is
        expected to be a csv file. If more than one file is specified, the
        reader will switch to file series mode in which it will pretend that it
        can support time and provide one file per time step.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="CSVReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="DetectNumericColumns" />
          <Property name="UseStringDelimiter" />
          <Property name="HaveHeaders" />
          <Property name="FieldDelimiterCharacters" />
          <Property name="MergeConsecutiveDelimiters" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <!-- View can be used to specify the preferred view for the proxy -->
        <View type="SpreadSheetView" />
        <ReaderFactory extensions="csv txt CSV TXT"
                       file_description="Delimited Text" />
      </Hints>
      <!-- End of CSVReader -->
    </SourceProxy>
    <SourceProxy class="vtkTecplotTableReader"
                 label="Tecplot Table Reader"
                 name="TecplotTableReaderCore">
      <Documentation>The Tecplot
                     table reader reads a .DAT file containing tabular
                     data into a spreadsheet view.</Documentation>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            >
        <FileListDomain name="files" />
        <Documentation>The name of the file to read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <IntVectorProperty command="SetMaxRecords"
                         default_values="0"
                         name="Max. Number of Records"
                         number_of_elements="1">
        <Documentation>The maximum number of records to read.
                       Use this to preview a file.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetHeaderLines"
                         default_values="2"
                         name="Number of header lines"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <Documentation>The number of lines that form the header.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetColumnNamesOnLine"
                         default_values="1"
                         name="Line with column names"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <Documentation>The line that contains the column names.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetSkipColumnNames"
                         default_values="1"
                         name="Skip #column name fields"
                         number_of_elements="1"
                         panel_visibility="advanced">
        <Documentation>Number of fiels to skip while reading column names.</Documentation>
      </IntVectorProperty>
      <Hints>
        <!-- View can be used to specify the preferred view for the proxy -->
        <View type="SpreadSheetView" />
        <ReaderFactory extensions="dat DAT"
                       file_description="Tecplot Table" />
      </Hints>
      <!-- End of TecplotTableReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Particles Reader"
                 name="ParticleReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads particle data."
                     short_help="Read particle data.">vtkParticleReader reads
                     either a binary or a text file of particles. Each particle
                     can have associated with it an optional scalar value. So
                     the format is: x, y, z, scalar (all floats or doubles).
                     The text file can consist of a comma delimited set of
                     values. In most cases vtkParticleReader can automatically
                     determine whether the file is text or binary. The data can
                     be either float or double. Progress updates are provided.
                     With respect to binary files, random access into the file
                     to read pieces is supported.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="ParticleReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="ByteOrder" />
          <Property name="HasScalar" />
          <Property name="FileType" />
          <Property name="DataType" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="particles"
                       file_description="VTK Particle Files" />
      </Hints>
      <!-- End of CSVReader -->
    </SourceProxy>
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Tecplot Reader"
                 name="TecplotReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads files in the Tecplot ASCII file format."
                     short_help="Read files in the Tecplot ASCII file format.">
                     The Tecplot reader extracts multiple zones (blocks) of
                     data from a Tecplot ASCII file, in which a zone is stored
                     in either point packing mode (i.e., tuple-based, with only
                     point data supported) or block packing mode (i.e.,
                     component-based, with point data and cell data supported).
                     The output of the reader is a vtkMultiBlockDataset, of
                     which each block is either a vtkStructuredGrid or a
                     vtkUnstructuredGrid. This supports reading a file
                     series.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileNames"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="TecplotReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="DataArrayInfo" />
          <Property name="DataArrayStatus" />
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <ReaderFactory extensions="tec TEC Tec tp TP dat"
                       file_description="Tecplot Files" />
      </Hints>
      <!-- End TecplotReader -->
    </SourceProxy>
    <!-- Start vtkVPICReader -->
    <SourceProxy class="vtkVPICReader"
                 label="VPIC Reader"
                 name="VPICReader">
      <Documentation long_help="Reads distributed VPIC files into an ImageData."
                     short_help="Read VPIC simulation files.">VPIC is a 3D
                     kinetic plasma particle-in-cell simulation. The input file
                     (.vpc) opened by the VPIC reader is an ASCII description
                     of the data files which are written one file per
                     processor, per category and per time step. These are
                     arranged in subdirectories per category (field data and
                     hydrology data) and then in time step
                     subdirectories.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>ASCII .vpc file describes locations of data files, grid
        sizes, time step sizes and type and order of data written to the
        files.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Variables written to the data files are described in the
        .vpc file and are presented for selection. Only selected variables are
        loaded for a time step.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <IntVectorProperty command="SetStride"
                         default_values="1 1 1"
                         label="Stride"
                         name="SetStride"
                         number_of_elements="3">
        <IntRangeDomain min="1"
                        name="range" />
        <Documentation>VPIC data may be very large and not all is needed for
        effective visualization. Setting the stride selects every nth data item
        within the files for display.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetXLayout"
                         information_only="1"
                         name="DefaultXExtent">
        <SimpleIntInformationHelper />
        <Documentation>VPIC data is written one file per simulation processor.
        This coarse map of files is used in partitioning files between
        visualizing processors so that each ParaView processor has its own set
        of files to display. Default extent is all files
        available.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetYLayout"
                         information_only="1"
                         name="DefaultYExtent">
        <SimpleIntInformationHelper />
        <Documentation>VPIC data is written one file per simulation processor.
        This coarse map of files is used in partitioning files between
        visualizing processors so that each ParaView processor has its own set
        of files to display. Default extent is all files
        available.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetZLayout"
                         information_only="1"
                         name="DefaultZExtent">
        <SimpleIntInformationHelper />
        <Documentation>VPIC data is written one file per simulation processor.
        This coarse map of files is used in partitioning files between
        visualizing processors so that each ParaView processor has its own set
        of files to display. Default extent is all files
        available.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="1"
                         command="SetXExtent"
                         default_values="-1 -1"
                         label="X Extent"
                         name="XExtent"
                         number_of_elements="2">
        <IntRangeDomain name="XRange">
          <RequiredProperties>
            <Property function="Range"
                      name="DefaultXExtent" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>VPIC data is written one file per simulation processor.
        This coarse map of files is used in partitioning files between
        visualizing processors so that each ParaView processor has its own set
        of files to display. Ghost cell overlap is handled within the reader.
        To limit the View of VPIC information the extent in the X dimension of
        "files" can be specified. Only the files selected will be displayed and
        they will be partitioned between the visualizing processors, allowing a
        higher resolution over a smaller area.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="1"
                         command="SetYExtent"
                         default_values="-1 -1"
                         label="Y Extent"
                         name="YExtent"
                         number_of_elements="2">
        <IntRangeDomain name="YRange">
          <RequiredProperties>
            <Property function="Range"
                      name="DefaultYExtent" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>VPIC data is written one file per simulation processor.
        This coarse map of files is used in partitioning files between
        visualizing processors so that each ParaView processor has its own set
        of files to display. Ghost cell overlap is handled within the reader.
        To limit the View of VPIC information the extent in the Y dimension of
        "files" can be specified. Only the files selected will be displayed and
        they will be partitioned between the visualizing processors, allowing a
        higher resolution over a smaller area.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty animateable="1"
                         command="SetZExtent"
                         default_values="-1 -1"
                         label="Z Extent"
                         name="ZExtent"
                         number_of_elements="2">
        <IntRangeDomain name="ZRange">
          <RequiredProperties>
            <Property function="Range"
                      name="DefaultZExtent" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>VPIC data is written one file per simulation processor.
        This coarse map of files is used in partitioning files between
        visualizing processors so that each ParaView processor has its own set
        of files to display. Ghost cell overlap is handled within the reader.
        To limit the View of VPIC information the extent in the Z dimension of
        "files" can be specified. Only the files selected will be displayed and
        they will be partitioned between the visualizing processors, allowing a
        higher resolution over a smaller area.</Documentation>
      </IntVectorProperty>
      <Hints>
        <ReaderFactory extensions="vpc"
                       file_description="VPIC Files" />
      </Hints>
    </SourceProxy>
    <!-- End vtkVPICReader -->
    <!-- Start WindBladeReader -->
    <SourceProxy class="vtkWindBladeReader"
                 label="WindBlade reader"
                 name="WindBladeReader">
      <Documentation long_help="Reads WindBlade/Firetec simulation files possibly including wind turbines and topology files."
                     short_help="Read WindBlade simulation files.">
                     WindBlade/Firetec is a simulation dealing with the effects
                     of wind on wind turbines or on the spread of fires. It
                     produces three outputs - a StructuredGrid for the wind
                     data fields, a StructuredGrid for the ground topology, and
                     a PolyData for turning turbine blades. The input file
                     (.wind) opened by the WindBlade reader is an ASCII
                     description of the data files expected. Data is
                     accumulated by the simulation processor and is written one
                     file per time step. WindBlade can deal with topology if a
                     flag is turned on and expects (x,y) data for the ground.
                     It also can deal with turning wind turbines from other
                     time step data files which gives polygon positions of
                     segments of the blades and data for each
                     segment.</Documentation>
      <OutputPort index="0"
                  name="Field" />
      <OutputPort index="1"
                  name="Blade" />
      <OutputPort index="2"
                  name="Ground" />
      <StringVectorProperty animateable="0"
                            command="SetFilename"
                            name="Filename"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>ASCII .wind file describes locations of data files, grid
        sizes and variable deltas, time step sizes, whether topology is used,
        whether turbines are used, and type and order of data written to the
        files.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Variables written to the data files are described in the
        .wind file and are presented for selection. Only selected variables are
        loaded for a time step.</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="wind"
                       file_description="WindBlade Data" />
      </Hints>
    </SourceProxy>
    <!-- End WindBladeReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="NetCDF CAM reader"
                 name="NetCDFCAMReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads unstructured grid data from NetCDF files. There are 2 files, a points+fields file which is set as FileName and a cell connectivity file set as ConnectivityFileName."
                     short_help="Read unstructured grid NetCDF files in CAM format.">
                     This reader reads in unstructured grid data from a NetCDF
                     file. The grid data is in a set of planes as quadrilateral
                     cells. The reader creates hex cells in order to create a
                     volumetric grid.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="NetCDFCAMReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="ConnectivityFileName" />
          <Property name="VerticalDimension" />
          <Property name="PointArrayStatus" />
          <Property name="SingleMidpointLayer" />
          <Property name="MidpointLayerIndex" />
          <Property name="SingleInterfaceLayer" />
          <Property name="InterfaceLayerIndex" />
          <Property name="CellLayerRight" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="nc ncdf"
                       file_description="CAM NetCDF (Unstructured)" />
      </Hints>
    </SourceProxy>
    <!-- End NetCDFCAMReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="NetCDF POP reader"
                 name="NetCDFPOPReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads rectilinear grid data from a NetCDF POP file."
                     short_help="Read rectilinear grid data from a NetCDF file in the POP format.">
      The reader reads regular rectilinear grid (image/volume) data from a
      NetCDF file.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="NetCDFPOPReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="VariableArrayInfo" />
          <Property name="VariableArrayStatus" />
          <Property name="Stride" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pop.ncdf pop.nc"
                       file_description="POP Ocean NetCDF (Rectilinear)" />
      </Hints>
    </SourceProxy>
    <!-- End NetCDFPOPReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetFileName"
                 label="Unstructured NetCDF POP reader"
                 name="UnstructuredPOPReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads rectilinear grid data from a NetCDF POP file and converts it into unstructured data."
                     short_help="Read rectlinear grid data from a NetCDF file in the POP format and converts it into unstructured data.">
      The reader reads regular rectilinear grid (image/volume) data from a
      NetCDF file and turns it into an unstructured spherical
      grid.</Documentation>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="UnstructuredPOPReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="Stride" />
          <Property name="VOI" />
          <Property name="VerticalVelocity" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            information_property="FileNameInfo"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of files to be read by the
        reader.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pop.ncdf pop.nc"
                       file_description="POP Ocean NetCDF (Unstructured)" />
      </Hints>
    </SourceProxy>
    <!-- End UnstructuredPOPReader -->

    <SourceProxy class="vtkMPASReader"
                 label="NetCDF MPAS reader"
                 name="MPASReader">
      <Documentation long_help="Reads unstructured grid MPAS data from a file."
                     short_help="Read unstructured grid MPAS data from a file.">
                     This reader reads unstructured grid MPAS data from a file.
                     It creates a dual grid It assumes the grid is in the
                     global domain. By default, it creates a spherical view of
                     vertical layer 0. It assumes it is ocean data. It gives
                     several options to change the view to multilayer (all
                     vertical layers will have a thickness determined by the
                     value in the slider), lat/lon projection or atmospheric
                     (vertical layers go out away from the center of the
                     sphere, instead of down towards the center as they do for
                     ocean data). It doesn't handle data in the rectangular
                     domain. This is not a parallel reader. It expects one .nc
                     file of data. It can display cell or vertex-centered data,
                     but not edge data. When converted to the dual grid,
                     cell-centered data becomes vertex-centered and vice-versa.
                     NOTES: When using this reader, it is important that you
                     remember to do the following: 1. When changing a selected
                     variable, remember to select it also in the drop down box
                     to color by. It doesn't color by that variable
                     automatically 2. When selecting multilayer sphere view,
                     start with layer thickness around 100,000 3. When
                     selecting multilayer lat/lon view, start with layer
                     thickness around 10 4. Always click the -Z orientation
                     after making a switch from lat/lon to sphere, from single
                     to multilayer or changing thickness. 5. Be conservative on
                     the number of changes you make before hitting Apply, since
                     there may be bugs in this reader. Just make one change and
                     then hit Apply. For problems, contact Christine Ahrens
                     (cahrens@lanl.gov)</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the file name to read. It should
        be an MPAS format NetCDF file ending in .nc.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty animateable="0"
                         command="SetUseDimensionedArrayNames"
                         name="UseDimensionedArrayNames"
                         number_of_elements="1"
                         default_values="1"
                         panel_visibility="never">
        <BooleanDomain name="bool" />
        <Documentation>This property ensures that the dimension info is always
        shown in the ParaView GUI.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            name="PointArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which NetCDF dual-grid point
        variables to load.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            name="CellArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which NetCDF dual-grid cell
        variables to load.</Documentation>
      </StringVectorProperty>
      <!-- Dimensions table: -->
      <!-- Elements are [arrayName] [currentIndex] [dimSize]: -->
      <StringVectorProperty information_only="1"
                            name="DimensionInfo"
                            command="Dimension"
                            si_class="vtkSIIndexSelectionProperty">
      </StringVectorProperty>
      <!-- Elements are [arrayName] [currentIndex]: -->
      <StringVectorProperty command="SetDimensionCurrentIndex"
                            name="DimensionCurrentIndex"
                            label="Extra Dimension Indices"
                            element_types="2 0"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1"
                            panel_widget="index_selection">
        <IndexSelectionDomain name="index_selection">
          <RequiredProperties>
            <Property function="Info"
                      name="DimensionInfo" />
          </RequiredProperties>
        </IndexSelectionDomain>
      </StringVectorProperty>
      <!-- End dimensions table -->
      <IntVectorProperty command="SetShowMultilayerView"
                         default_values="0"
                         name="ShowMultilayerView"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether to show multiple layers
        in one view, with each vertical level having the same thickness,
        specified by the layer thickness slider. For ocean data, the layers
        correspond to data at vertical level whose number increases towards the
        center of the sphere. For atmospheric data, the layers correspond to
        data at vertical levels increasing away from the
        center.</Documentation>
      </IntVectorProperty>
      <StringVectorProperty command="GetAllDimensions"
                            information_only="1"
                            name="DimensionList">
        <StringArrayHelper />
      </StringVectorProperty>
      <StringVectorProperty command="SetVerticalDimension"
                            name="VerticalDimension"
                            label="Vertical Dimension"
                            number_of_elements="1"
                            default_values="nVertLevels"
                            panel_visibility="default">
        <StringListDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="DimensionList" />
          </RequiredProperties>
        </StringListDomain>
        <Hints>
          <PropertyWidgetDecorator type="EnableWidgetDecorator">
            <Property name="ShowMultilayerView" function="boolean" />
          </PropertyWidgetDecorator>
        </Hints>
      </StringVectorProperty>
      <IntVectorProperty command="SetProjectLatLon"
                         default_values="0"
                         name="ProjectLatLon"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether to view the data in the
        lat/lon projection.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetIsAtmosphere"
                         default_values="0"
                         name="IsAtmosphere"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>This property indicates whether data is atmospheric.
        Checking this ensures the vertical levels will go up away from the
        sphere instead of down towards the center.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetLayerThicknessRange"
                         information_only="1"
                         name="LayerThicknessRangeInfo">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty command="SetLayerThickness"
                         default_values="10"
                         label="Layer Thickness"
                         name="LayerThickness"
                         number_of_elements="1">
        <IntRangeDomain name="LayerThicknessRange">
          <RequiredProperties>
            <Property function="Range"
                      name="LayerThicknessRangeInfo" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>This property specifies how thick the layer should be if
        viewing the data in multilayer view. Each layer corresponds to a
        vertical level. A good starting point is 100,000 for the spherical view
        and 10 for the lat/lon projection. Click on -Z after applying this
        change, since the scale may change drastically.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="GetCenterLonRange"
                         information_only="1"
                         name="CenterLonRangeInfo">
        <SimpleIntInformationHelper />
      </IntVectorProperty>
      <IntVectorProperty command="SetCenterLon"
                         default_values="180"
                         label="Center Longitude"
                         name="CenterLon"
                         number_of_elements="1">
        <IntRangeDomain name="CenterLonRange">
          <RequiredProperties>
            <Property function="Range"
                      name="CenterLonRangeInfo" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>This property specifies where the center will be viewed
        for a lat/lon projection.</Documentation>
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="ncdf nc"
                       file_description="MPAS NetCDF (Unstructured)" />
      </Hints>
    </SourceProxy>
    <!-- End MPASReader -->
    <SourceProxy class="vtkFileSeriesReader"
                 file_name_method="SetQFileName"
                 label="PLOT3D Reader"
                 name="P3DReader"
                 si_class="vtkSIMetaReaderProxy">
      <Documentation long_help="Reads ASCII or binary PLOT3D files."
                     short_help="Read PLOT3D files.">PLOT3D is a plotting
                     package developed at NASA. The PLOT3D reader can read both
                     ASCII and binary PLOT3D files. The default file extension
                     for the geometry files is .xyz, and the default file
                     extension for the solution files is .q. The output of this
                     reader is a multi-block dataset containing curvilinear
                     (structured grid) datasets.</Documentation>
      <StringVectorProperty animateable="0"
                            clean_command="RemoveAllFileNames"
                            command="AddFileName"
                            name="QFileName"
                            number_of_elements="1"
                            repeat_command="1">
        <FileListDomain name="files" />
        <Documentation>The list of .q (solution) files for the PLOT3D reader.
        There can be more than one. If more that one file is specified, the
        reader will switch to file-series mode in which it will pretend that it
        can support time and provide one file per time step.</Documentation>
        <Hints>
          <FileChooser extensions="q" file_description="Solution files" />
        </Hints>
      </StringVectorProperty>
      <SubProxy>
        <Proxy name="Reader"
               proxygroup="internal_sources"
               proxyname="P3DReaderCore"></Proxy>
        <ExposedProperties>
          <Property name="FileName" />
          <Property name="FunctionFileName"/>
          <Property name="AutoDetectFormat"/>
          <Property name="BinaryFile" />
          <Property name="MultiGrid" />
          <Property name="HasByteCount" />
          <Property name="IBlanking" />
          <Property name="TwoDimensionalGeometry" />
          <Property name="DoublePrecision" />
          <Property name="ByteOrder" />
          <Property name="Functions" />
          <Property name="ForceRead" />
        </ExposedProperties>
      </SubProxy>
      <StringVectorProperty command="GetCurrentFileName"
                            information_only="1"
                            name="FileNameInfo">
        <SimpleStringInformationHelper />
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="xyz"
                       file_description="PLOT3D Files" />
        <!-- This hint tells the GUI that the File | Open dialog sets the FileName
         property -->
        <DefaultFileNameProperty name="FileName" />
      </Hints>
      <!-- End plot3d reader-->
    </SourceProxy>
    <!-- Plot3D Meta Reader -->
    <SourceProxy class="vtkPlot3DMetaReader"
                 label="PLOT3D Meta-File Reader"
                 name="Plot3DMetaReader">
      <Documentation short_help="The main goal of this reader is to make it easy to read PLOT3D files or time series of PLOT3D files.">
The main goal of this reader is to make it easy to read PLOT3D files,
specifically time series of PLOT3D files. PLOT3D files can take many
different forms based on their content. Unfortunately, it is not a
self-describing format therefore the user needs to pass information
about the contents of the file to the reader. Normally, this is done
by setting a number of member variables. The goal of this reader is to
provide a simple format that enable the writer of the PLOT3D file to
describe its settings as well as group a number of files as a time
series.
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the meta file
        name</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="p3d"
                       file_description="PLOT3D Meta Files" />
      </Hints>
      <!-- End Plot3D Meta Reader-->
    </SourceProxy>
    <!-- CML Reader -->
    <SourceProxy class="vtkCMLMoleculeReader"
                 label="CML Molecule Reader"
                 name="CMLMoleculeReader">
      <Documentation short_help="A reader for Chemical Markup Language (CML)">
        This is a reader for Chemical Markup Language (CML) which
        describes chemical information using XML.
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the CML file
        name</Documentation>
      </StringVectorProperty>
      <Hints>
        <ReaderFactory extensions="cml"
                       file_description="CML" />
      </Hints>
    </SourceProxy>
    <!-- End CML Reader -->
    <SourceProxy class="vtkVASPAnimationReader"
                 label="VASP Animation Reader"
                 name="VASPAnimationReader">
      <Documentation long_help="Reads a VASP NPT_Z_ANIMATE.out file."
                     short_help="Read a VASP animation file.">
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>
          Reports time values to the GUI.
        </Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="out"
                       file_description="VASP Animation Files" />
      </Hints>
    </SourceProxy>
    <!-- End VASPAnimationReader -->
    <SourceProxy class="vtkVASPTessellationReader"
                 label="VASP Tessellation Reader"
                 name="VASPTessellationReader">
      <Documentation long_help="Reads a VASP NPT_Z_TESSELLATE.out file."
                     short_help="Read a VASP tessellation file.">
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>The name of the file to load.</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>
          Reports time values to the GUI.
        </Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="out"
                       file_description="VASP Tessellation Files" />
      </Hints>
      <OutputPort index="0"
                  name="Molecule" />
      <OutputPort index="1"
                  name="Voronoi Tessellation" />
    </SourceProxy>
    <!-- End VASPTessellationReader -->
    <!-- Begin Ensemble Data Reader -->
    <EnsembleDataReaderProxy class="vtkEnsembleDataReader"
                             label="Ensemble Data Reader"
                             name="EnsembleDataReader">
      <Documentation long_help="Reads ensemble data organized in CSV files."
                     short_help="Reads ensemble CSV files">
        Reads CSV files in which each row gives a dataset and the last column of
        each row specifies the file name for the dataset. The standard extension
        is .pve.
      </Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files"/>
        <Documentation>
          This property specifies the PVE file name
        </Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="CurrentEnsembleMember"
                         command="SetCurrentMember"
                         animatable="1"
                         default_values="0"
                         number_of_elements="1">
        <IntRangeDomain name="range" default_mode="min">
          <RequiredProperties>
            <Property name="EnsembleMemberRange" function="Range" />
          </RequiredProperties>
        </IntRangeDomain>
        <Documentation>
          The index of the dataset in the ensemble.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="EnsembleMemberRange"
                         command="GetCurrentMemberRange"
                         information_only="1"
                         number_of_elements="2"
                         default_values="0 0">
      </IntVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>
          Reports time values to the GUI.
        </Documentation>
      </DoubleVectorProperty>
      <Hints>
        <ReaderFactory extensions="pve"
                       file_description="ParaView Ensemble Data" />
      </Hints>
    </EnsembleDataReaderProxy>
    <!-- End Ensemble Data Reader -->

    <!-- GE/LANL TRUCHAS Reader -->
    <SourceProxy class="vtkTRUCHASReader"
                 label="TRUCHAS Reader"
                 name="TruchasReader">
      <Documentation long_help="Reads TRUCHAS data from hdf5"
                     short_help="Reads TRUCHAS data">Reads TRUCHAS simulation output stored in hdf5.</Documentation>
      <StringVectorProperty animateable="0"
                            command="SetFileName"
                            name="FileName"
                            number_of_elements="1"
                            panel_visibility="never">
        <FileListDomain name="files" />
        <Documentation>This property specifies the hdf5 file name</Documentation>
      </StringVectorProperty>
      <DoubleVectorProperty information_only="1"
                            name="TimestepValues"
                            repeatable="1">
        <TimeStepsInformationHelper />
        <Documentation>Available timestep values.</Documentation>
      </DoubleVectorProperty>
            <StringVectorProperty information_only="1"
                            name="PointArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Point" />
      </StringVectorProperty>
      <StringVectorProperty command="SetPointArrayStatus"
                            element_types="2 0"
                            information_property="PointArrayInfo"
                            label="Point Arrays"
                            name="PointArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            panel_visibility="default"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="PointArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which point-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="CellArrayInfo">
        <ArraySelectionInformationHelper attribute_name="Cell" />
      </StringVectorProperty>
      <StringVectorProperty command="SetCellArrayStatus"
                            element_types="2 0"
                            information_property="CellArrayInfo"
                            label="Cell Arrays"
                            name="CellArrayStatus"
                            number_of_elements="0"
                            number_of_elements_per_command="2"
                            panel_visibility="default"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="CellArrayInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>This property lists which cell-centered arrays to
        read.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty information_only="1"
                            name="BlockInfo">
        <ArraySelectionInformationHelper attribute_name="Block" />
      </StringVectorProperty>
      <StringVectorProperty command="SetBlockArrayStatus"
                            element_types="2 0"
                            information_property="BlockInfo"
                            label="Blocks"
                            name="BlockArrayStatus"
                            number_of_elements="2"
                            number_of_elements_per_command="2"
                            repeat_command="1">
        <ArraySelectionDomain name="array_list">
          <RequiredProperties>
            <Property function="ArrayList"
                      name="BlockInfo" />
          </RequiredProperties>
        </ArraySelectionDomain>
        <Documentation>Select the grids to be loaded from the dataset, if
        any.</Documentation>
      </StringVectorProperty>

      <Hints>
        <ReaderFactory extensions="hdf5 h5"
                       file_description="TRUCHAS dataset" />
      </Hints>
    </SourceProxy>

  </ProxyGroup>
</ServerManagerConfiguration>
