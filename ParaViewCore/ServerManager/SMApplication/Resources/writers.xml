<ServerManagerConfiguration>
  <ProxyGroup name="writers">
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="ParallelWriterBase"
                  class="vtkXMLPVDWriter"
                  name="XMLPVDWriter">
      <Documentation short_help="Write ParaView data files (pvd).">Writer to
      write ParaView data files (pvd). It is used to save all pieces of a
      source/filter to a file with pieces spread across the server
      processes.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the files.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetHeaderType"
                         default_values="64"
                         name="HeaderType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="UInt32" value="32" />
          <Entry text="UInt64" value="64" />
        </EnumerationDomain>
        <Documentation>Set the binary data header word type.  The default is
        UInt32. Set to UInt64 when storing arrays requiring 64-bit indexing.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetDataMode"
                         default_values="2"
                         name="DataMode"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="Ascii"
                 value="0" />
          <Entry text="Binary"
                 value="1" />
          <Entry text="Appended"
                 value="2" />
        </EnumerationDomain>
        <Documentation>The mode uses for writing the file's data i.e. ascii,
        binary, appended binary.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetEncodeAppendedData"
                         default_values="0"
                         name="EncodeAppendedData"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When EncodeAppendedData is turned ON, the writer uses
        base64 encoding when writing binary data (only if appended mode is
        selected).</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetCompressorType"
                         default_values="0"
                         name="CompressorType"
                         number_of_elements="1">
        <EnumerationDomain name="enum">
          <Entry text="None"
                 value="0" />
          <Entry text="ZLib"
                 value="1" />
        </EnumerationDomain>
        <Documentation>The compression algorithm used to compress binary data
        (appended mode only).</Documentation>
      </IntVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="pvd"
                       file_description="ParaView Data Files" />
      </Hints>
      <!-- End of XMLPVDWriter -->
    </PWriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="FileSeriesWriter"
                 name="XMLDataSetWriterBase">
      <Documentation>Base for all XML-based file-series
      writers.</Documentation>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLDataSetWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="DataMode" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <!-- End of XMLDataSetWriterBase -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLDataSetWriterBase"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLPolyDataWriter">
      <Documentation short_help="Write poly data in a xml-based vtk data file.">
      Writer to write poly data in a xml-based vtk data file. Cannot be used
      for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vtp"
                       file_description="VTK PolyData Files" />
      </Hints>
      <!-- End of XMLPolyDataWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLDataSetWriterBase"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLHyperOctreeWriter">
      <Documentation short_help="Write unstructured grid in a xml-based vtk data file.">
      Writer to write unstructured grid in a xml-based vtk data file. Cannot be
      used for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkHyperOctree" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vto"
                       file_description="VTK Octree Files" />
      </Hints>
      <!-- End of XMLHyperOctreeWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLDataSetWriterBase"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLUnstructuredGridWriter">
      <Documentation short_help="Write unstructured grid in a xml-based vtk data file.">
      Writer to write unstructured grid in a xml-based vtk data file. Cannot be
      used for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkUnstructuredGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vtu"
                       file_description="VTK UnstructuredGrid Files" />
      </Hints>
      <!-- End of XMLUnstructuredGridWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLDataSetWriterBase"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLStructuredGridWriter">
      <Documentation short_help="Write structured grid in a xml-based vtk data file.">
      Writer to write structured grid in a xml-based vtk data file. Cannot be
      used for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkStructuredGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vts"
                       file_description="VTK StructuredGrid Files" />
      </Hints>
      <!-- End of XMLStructuredGridWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLDataSetWriterBase"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLRectilinearGridWriter">
      <Documentation short_help="Write rectilinear grid in a xml-based vtk data file.">
      Writer to write rectilinear grid in a xml-based vtk data file. Cannot be
      used for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkRectilinearGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vtr"
                       file_description="VTK RectilinearGrid Files" />
      </Hints>
      <!-- End of XMLRectilinearGridWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLDataSetWriterBase"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLImageDataWriter">
      <Documentation short_help="Write image data in a xml-based vtk data file.">
      Writer to write image data in a xml-based vtk data file. Cannot be used
      for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vti"
                       file_description="VTK ImageData Files" />
      </Hints>
      <!-- End of XMLImageDataWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="ParallelFileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLPPolyDataWriter"
                 parallel_only="1">
      <Documentation short_help="Write polydata in a xml-based vtk data file.">
      Writer to write polydata in a xml-based vtk data file. Can be used for
      parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPPolyDataWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="GhostLevel" />
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="pvtp"
                       file_description="PVTK PolyData Files" />
      </Hints>
      <!-- End of XMLPPolyDataWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="ParallelFileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLPUnstructuredGridWriter"
                 parallel_only="1">
      <Documentation short_help="Write unstructured grid in a xml-based vtk data file.">
      Writer to write unstructured grid in a xml-based vtk data file. Can be
      used for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkUnstructuredGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPUnstructuredGridWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="GhostLevel" />
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="pvtu"
                       file_description="PVTK UnstructuredGrid Files" />
      </Hints>
      <!-- End of XMLPUnstructuredGridWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="ParallelFileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLPStructuredGridWriter"
                 parallel_only="1">
      <Documentation short_help="Write structured grid in a xml-based vtk data file.">
      Writer to write structured grid in a xml-based vtk data file. Can be used
      for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkStructuredGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPStructuredGridWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="pvts"
                       file_description="PVTK StructuredGrid Files" />
      </Hints>
      <!-- End of XMLPStructuredGridWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="ParallelFileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLPRectilinearGridWriter"
                 parallel_only="1">
      <Documentation short_help="Write rectilinear grid in a xml-based vtk data file.">
      Writer to write rectilinear grid in a xml-based vtk data file. Can be
      used for parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkRectilinearGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPRectilinearGridWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="pvtr"
                       file_description="PVTK RectilinearGrid Files" />
      </Hints>
      <!-- End of XMLPRectilinearGridWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="ParallelFileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLPImageDataWriter"
                 parallel_only="1">
      <Documentation short_help="Write image data in a xml-based vtk data file.">
      Writer to write image data in a xml-based vtk data file. Can be used for
      parallel writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPImageDataWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="pvti"
                       file_description="PVTK ImageData Files" />
      </Hints>
      <!-- End of XMLPImageDataWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="FileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLMultiBlockDataWriter"
                 supports_parallel="1">
      <Documentation short_help="Write a multiblock in a xml-based vtk data file.">
      Writer to write a multiblock dataset in a xml-based vtk data file. Can be
      used for parallel writing as well as serial writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkMultiBlockDataSet" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPMultiBlockDataWriterCore"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="HeaderType"
                  show="0" />
        <WriterFactory extensions="vtm"
                       file_description="VTK Multi Block Files" />
      </Hints>
      <!-- End of XMLMultiBlockDataWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="FileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLUniformGridAMRWriter"
                 supports_parallel="1">
      <Documentation short_help="Write a amr dataset in a xml-based vtk data file.">
      Writer to write an AMR data-set (overlapping/non-overlapping)
      in a xml-based vtk data file. Can be used for parallel writing as well as
      serial writing.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <DataTypeDomain name="input_type">
          <DataType value="vtkUniformGridAMR" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>

      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="XMLPUniformGridAMRWriter"></Proxy>
        <ExposedProperties>
          <PropertyGroup label="XML Writer Parameters">
            <Property name="DataMode" />
            <Property name="HeaderType" />
            <Property name="EncodeAppendedData" />
            <Property name="CompressorType" />
          </PropertyGroup>
        </ExposedProperties>
      </SubProxy>
      <Hints>
        <Property name="Input" show="0" />
        <Property name="FileName" show="0" />
        <Property name="HeaderType" show="0" />
        <WriterFactory extensions="vthb"
                       file_description="VTK AMR Files" />
      </Hints>
      <!-- End of XMLUniformGridAMRWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="writers"
                 base_proxyname="XMLUniformGridAMRWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="XMLHierarchicalBoxDataWriter"
                 supports_parallel="1">
      <Documentation short_help="(DEPRECATED) Write a hierarchical box dataset in a xml-based vtk data file.">
      (DEPRECATED) Writer to write a hierarchical box in a xml-based vtk data file. Can be
      used for parallel writing as well as serial writing. This is deprecated.
      Use XMLUniformGridAMRWriter instead.
      </Documentation>
    </WriterProxy>

    <!-- ================================================================= -->
    <WriterProxy base_proxygroup="internal_writers"
                 base_proxyname="FileSeriesWriter"
                 class="vtkFileSeriesWriter"
                 file_name_method="SetFileName"
                 name="DataSetWriter">
      <Documentation short_help="Write any type of data object in a legacy vtk data file.">
      Writer to write any type of data object in a legacy vtk data file. Cannot
      be used for parallel writing.</Documentation>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="DataSetWriterCore"></Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkDataObject" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="vtk"
                       file_description="Legacy VTK Files" />
      </Hints>
      <!-- End of DataSetWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="PDataSetWriterPolyData"
                   parallel_only="1">
      <Documentation short_help="Writer that writes polydata as legacy vtk files.">
      Writer to write vtkPolyData in a legacy vtk data file. This
      version is used when running in parallel. It gathers data to first node
      and saves one file.</Documentation>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="DataSetWriterCore"></Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         name="WriteAllTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each timestep available from the
        reader.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="PostGatherHelper"
               proxygroup="filters"
               proxyname="AppendPolyData" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="vtk"
                       file_description="Legacy VTK Files" />
      </Hints>
      <!-- End of PDataSetWriterPolyData -->
    </PSWriterProxy>

    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="PDataSetWriterUnstructuredGrid"
                   parallel_only="1">
      <Documentation short_help="Writer that writes unstructured grid as legacy vtk files.">
      Writer to write vtkUnstructuredGrid of data object in a legacy vtk data file. This
      version is used when running in parallel. It gathers data to first node
      and saves one file.</Documentation>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="DataSetWriterCore"></Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkUnstructuredGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         name="WriteAllTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each timestep available from the
        reader.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="PostGatherHelper"
               proxygroup="filters"
               proxyname="Append" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="vtk"
                       file_description="Legacy VTK Files" />
      </Hints>
      <!-- End of PDataSetWriterUnstructuredGrid -->
    </PSWriterProxy>

    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="PPLYWriter">
      <Documentation short_help="Write polygonal data in Stanford University PLY format.">
      Writer to write polygonal data in Stanford University PLY format. The
      data can be written in either binary (little or big endian) or ASCII
      representation. As for PointData and CellData, vtkPLYWriter cannot handle
      normals or vectors. It only handles RGB PointData and CellData. This
      version is used when running in parallel. It gathers data to first node
      and saves one file.</Documentation>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="PLYWriter"></Proxy>
        <ExposedProperties>
          <Property name="FileType" />
          <Property name="EnableColoring" />
          <Property name="ColorArrayName" />
          <Property name="LookupTable" />
        </ExposedProperties>
        <LinkProperties>
          <Property name="DummyInput" with_property="Input" />
        </LinkProperties>
      </SubProxy>
      <PropertyGroup label="Color Properties">
        <Property name="EnableColoring" />
        <Property name="ColorArrayName" />
        <Property name="LookupTable" />
      </PropertyGroup>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         name="WriteAllTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each time step available from the
        reader.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="PostGatherHelper"
               proxygroup="filters"
               proxyname="AppendPolyData" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="ply" file_description="PLY Polygonal File Format" />
        <InitializationHelper class="vtkSMPLYWriterProxyInitializationHelper" />
        <UseDocumentationForLabels />
      </Hints>
      <!-- End of PLYWriter -->
    </PSWriterProxy>
    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="PSTLWriter">
      <Documentation short_help="Write stereo lithography files.">STLWriter
      writes stereo lithography (.stl) files in either ASCII or binary form.
      Stereo lithography files only contain triangles. If polygons with more
      than 3 vertices are present, only the first 3 vertices are written. Use
      TriangleFilter to convert polygons to triangles. This version of the
      reader is used when running in parallel. It gathers all the geometry to
      first node and saves 1 file.</Documentation>
      <SubProxy>
        <Proxy name="Writer"
               proxygroup="internal_writers"
               proxyname="STLWriter"></Proxy>
        <ExposedProperties>
          <Property name="FileType" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="WriteAllTimeSteps"
                         command="SetWriteAllTimeSteps"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each timestep available from the reader.
        </Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="PostGatherHelper"
               proxygroup="filters"
               proxyname="AppendPolyData" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="stl"
                       file_description="Stereo Lithography File Format" />
      </Hints>
      <!-- End of PSTLWriter -->
    </PSWriterProxy>
    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="HoudiniWriter">
      <Documentation short_help="Write polygonal data in Houdini .geo format.">
      Writer to write polygonal data in ASCII Houdini .geo (pre-v12.0)
      format. </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkPolyData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="WriteAllTimeSteps"
                         command="SetWriteAllTimeSteps"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each timestep available from the reader.
        </Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy name="PostGatherHelper"
               proxygroup="filters"
               proxyname="AppendPolyData" />
      </SubProxy>
      <SubProxy>
        <Proxy name="Writer" class="vtkHoudiniPolyDataWriter" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="geo" file_description="Houdini File Format" />
        <UseDocumentationForLabels />
      </Hints>
      <!-- End of HoudiniWriter -->
    </PSWriterProxy>
    <!-- ================================================================= -->
    <WriterProxy class="vtkMetaImageWriter"
                 name="MetaImageWriter">
      <Documentation short_help="Write a binary UNC meta image data.">Writer to
      write a binary UNC meta image data. This is a fairly simple yet powerful
      format consisting of a text header and a binary data section. MetaImage
      headers are expected to have extension: ".mha" or ".mhd"</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="mhd"
                       file_description="Meta Image Files" />
      </Hints>
      <!-- End of MetaImageWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy class="vtkPNGWriter"
                 name="PNGWriter">
      <Documentation short_help="Write image data as a PNG file.">Writer to
      write image data as a PNG file. It supports 1 to 4 component data of
      unsigned char or unsigned short.
      This Writer can also generate a stack of images when the FileName is in
      the form of /path/file_%03d.png and that the input data is a 3D image
      data.
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFilePattern"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="png"
                       file_description="PNG Image Files" />
      </Hints>
      <!-- End of PNGWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy class="vtkTIFFWriter"
                 name="TIFFWriter">
      <Documentation short_help="Write image data as a TIFF file.">Writer to
      write image data as a TIFF file.
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to be
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFilePattern"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="tiff"
                       file_description="TIFF Image Files" />
      </Hints>
      <!-- End of TIFFWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy class="vtkJPEGWriter"
                 name="JPEGWriter">
      <Documentation short_help="Write image data as a JPEG file.">
      Writer to write image data as a JPEG file. It supports 1 to 3 component
      data of unsigned char or unsigned short.
      This Writer can also generate a stack of images when the FileName is in
      the form of /path/file_%03d.jpg and that the input data is a 3D image
      data.
      </Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFilePattern"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="jpg"
                       file_description="JPEG Image Files" />
      </Hints>
      <!-- End of JPEGWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy class="vtkJSONImageWriter"
                 name="JSONImageWriter">
      <Documentation short_help="Write image data as a JSON file."/>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkImageData" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <StringVectorProperty command="SetArrayName"
                            name="ArrayName"
                            number_of_elements="1">
        <Documentation>The name of the field to export. If Empty all fields will be saved.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetSlice"
                            name="Slice"
                            default_values="-1"
                            number_of_elements="1">
        <Documentation>Write only one slice if slice >= 0</Documentation>
        <IntRangeDomain min="-1"
                        name="range" />
      </IntVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="json"
                       file_description="json Image Files" />
      </Hints>
      <!-- End of vtkJSONImageWriter -->
    </WriterProxy>
    <!-- ================================================================= -->
    <WriterProxy class="vtkXdmfWriter"
                 name="XdmfWriter">
      <Documentation short_help="Write data in Xdmf files.">Writer to write
      data in eXtensible Data Model and Format *(XDMF) files.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty name="WriteAllTimeSteps"
                         command="SetWriteAllTimeSteps"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each timestep available from the reader.
        </Documentation>
      </IntVectorProperty>
      <IntVectorProperty name="MeshStaticOverTime"
                         command="SetMeshStaticOverTime"
                         number_of_elements="1"
                         default_values="0">
        <BooleanDomain name="bool" />
        <Documentation>When MeshStaticOverTime is turned ON, only the mesh
          topology and geometry at the first time step will be written in the
          heavy data file. All time steps will reference them in the Xdmf file.
        </Documentation>
      </IntVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="xmf"
                       file_description="Xdmf Data File" />
      </Hints>
      <!-- End of XdmfWriter -->
    </WriterProxy>

    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="ParallelWriterBase"
                  class="vtkExodusIIWriter"
                  name="ExodusIIWriter">
      <Documentation short_help="Write Exodus II files.">Writer to write Exodus
      II files. Refere to http://endo.sandia.gov/SEACAS/ for more information
      about the Exodus II format.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="1"
                        name="input_type">
          <DataType value="vtkCompositeDataSet" />
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         name="WriteAllTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each time step available from the
        reader.</Documentation>
      </IntVectorProperty>
      <IntVectorProperty command="SetIgnoreMetaDataWarning"
                         default_values="0"
                         name="IgnoreMetaDataWarning"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>In certain cases like Catalyst we know that metadata doesn't exist and
        we want to ignore that warning.</Documentation>
      </IntVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <Property name="GhostLevel"
                  show="0" />
        <Property name="IgnoreMetaDataWarning"
                  show="0" />
        <WriterFactory extensions="g e ex2 ex2v2 exo gen exoII exoii"
                       file_description="Exodus II File" />
      </Hints>
      <!-- End of ExodusIIWriter -->
    </PWriterProxy>
    <!-- ================================================================= -->
    <PWriterProxy base_proxygroup="internal_writers"
                  base_proxyname="ParallelWriterBase"
                  class="vtkEnSightWriter"
                  name="EnSightWriter">
      <Documentation short_help="Write unstructured grid data as an EnSight file.">
      Writer to write unstructured grid data as an EnSight file. Binary files
      written on one system may not be readable on other systems. Be sure to
      specify the endian-ness of the file when reading it into
      EnSight.</Documentation>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain composite_data_supported="0"
                        name="input_type">
          <DataType value="vtkUnstructuredGrid" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="case"
                       file_description="EnSight File" />
      </Hints>
      <!-- End of EnSightWriter -->
    </PWriterProxy>

    <!-- ================================================================= -->
    <SourceProxy class="vtkXMLPVAnimationWriter"
                 name="XMLPVAnimationWriter">
      <Documentation>Internal writer proxy used when saving animation geometry
      to save all parts of the current source to the file with pieces spread
      across the server processes.</Documentation>
      <InputProperty clean_command="RemoveAllRepresentations"
                     command="AddRepresentation"
                     name="Representations"
                     repeat_command="1"
                     si_class="vtkSIXMLAnimationWriterRepresentationProperty">
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName">
        <Documentation>Name of the file to write.</Documentation>
      </StringVectorProperty>
      <Property command="Start"
                name="Start">
        <Documentation>Used to begin writing of the animation</Documentation>
      </Property>
      <DoubleVectorProperty command="WriteTime"
                            default_values="0.0"
                            is_internal="1"
                            name="WriteTime"
                            number_of_elements="1">
        <DoubleRangeDomain min="0"
                           name="range" />
        <Documentation>Write each time step in the animation</Documentation>
      </DoubleVectorProperty>
      <Property command="Finish"
                name="Finish">
        <Documentation>Finish writing animation</Documentation>
      </Property>
      <IntVectorProperty command="GetErrorCode"
                         information_only="1"
                         name="ErrorCode"></IntVectorProperty>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
      </Hints>
      <!-- End of XMLPVAnimationWriter -->
    </SourceProxy>
    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="CSVWriter">
      <Documentation short_help="Writer to write CSV files">Writer to write CSV
      files from table. In parallel, it delivers the table to the root node and
      then saves the CSV. For composite datasets, it saves multiple csv
      files.</Documentation>
      <SubProxy>
        <Proxy class="vtkCSVWriter"
               name="Writer">
          <IntVectorProperty command="SetPrecision"
                             default_values="5"
                             name="Precision"
                             number_of_elements="1">
            <IntRangeDomain min="0"
                            name="range" />
          </IntVectorProperty>
          <IntVectorProperty command="SetUseScientificNotation"
                             default_values="0"
                             name="UseScientificNotation"
                             number_of_elements="1">
            <BooleanDomain name="bool" />
          </IntVectorProperty>
        </Proxy>
        <ExposedProperties>
          <Property name="Precision" />
          <Property name="UseScientificNotation" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkTable" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         name="WriteAllTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each time step available from the
        reader.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy class="vtkPVMergeTables"
               name="PostGatherHelper" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="csv"
                       file_description="CSV File" />
      </Hints>
      <!-- End of CSVWriter -->
    </PSWriterProxy>
    <!-- ================================================================= -->
    <PSWriterProxy class="vtkParallelSerialWriter"
                   file_name_method="SetFileName"
                   name="DataSetCSVWriter">
      <Documentation short_help="Writer to write CSV files">Writer to write CSV
      files from any dataset. Set FieldAssociation to choose whether cell
      data/point data needs to be saved. In parallel, it delivers the table to
      the root node and then saves the CSV. For composite datasets, it saves
      multiple csv files.</Documentation>
      <SubProxy>
        <Proxy class="vtkCSVWriter"
               name="Writer">
          <IntVectorProperty command="SetPrecision"
                             default_values="5"
                             name="Precision"
                             number_of_elements="1">
            <IntRangeDomain min="0"
                            name="range" />
          </IntVectorProperty>
          <IntVectorProperty command="SetUseScientificNotation"
                             default_values="0"
                             name="UseScientificNotation"
                             number_of_elements="1">
            <BooleanDomain name="bool" />
          </IntVectorProperty>
        </Proxy>
        <ExposedProperties>
          <Property name="Precision" />
          <Property name="UseScientificNotation" />
        </ExposedProperties>
      </SubProxy>
      <InputProperty command="SetInputConnection"
                     name="Input">
        <ProxyGroupDomain name="groups">
          <Group name="sources" />
          <Group name="filters" />
        </ProxyGroupDomain>
        <DataTypeDomain name="input_type">
          <DataType value="vtkDataSet" />
        </DataTypeDomain>
        <Documentation>The input filter/source whose output dataset is to
        written to the file.</Documentation>
      </InputProperty>
      <StringVectorProperty command="SetFileName"
                            name="FileName"
                            number_of_elements="1">
        <Documentation>The name of the file to be written.</Documentation>
      </StringVectorProperty>
      <IntVectorProperty command="SetWriteAllTimeSteps"
                         default_values="0"
                         name="WriteAllTimeSteps"
                         number_of_elements="1">
        <BooleanDomain name="bool" />
        <Documentation>When WriteAllTimeSteps is turned ON, the writer is
        executed once for each timestep available from the
        reader.</Documentation>
      </IntVectorProperty>
      <SubProxy>
        <Proxy class="vtkAttributeDataToTableFilter"
               name="PreGatherHelper">
          <IntVectorProperty command="SetFieldAssociation"
                             default_values="0"
                             name="FieldAssociation"
                             number_of_elements="1">
            <Documentation>Select the attribute data to pass.</Documentation>
            <EnumerationDomain name="enum">
              <Entry text="Points"
                     value="0" />
              <Entry text="Cells"
                     value="1" />
              <Entry text="Field Data"
                     value="2" />
              <!-- These values are not applicable for vtkDataSet.
               <Entry text="Vertices" value="4" />
               <Entry text="Edges" value="5" />
               <Entry text="Rows" value="6" />
               -->
            </EnumerationDomain>
          </IntVectorProperty>
          <IntVectorProperty command="SetAddMetaData"
                             default_values="1"
                             name="AddMetaData"
                             number_of_elements="1">
            <Documentation>It is possible for this filter to add additional
            meta-data to the field data such as point coordinates (when point
            attributes are selected and input is pointset) or structured
            coordinates etc. To enable this addition of extra information, turn
            this flag on.</Documentation>
            <BooleanDomain name="bool" />
          </IntVectorProperty>
        </Proxy>
        <ExposedProperties>
          <Property name="FieldAssociation" />
        </ExposedProperties>
      </SubProxy>
      <SubProxy>
        <Proxy class="vtkPVMergeTables"
               name="PostGatherHelper" />
      </SubProxy>
      <Hints>
        <Property name="Input"
                  show="0" />
        <Property name="FileName"
                  show="0" />
        <WriterFactory extensions="csv"
                       file_description="CSV File" />
      </Hints>
      <!-- End of CSVWriter -->
    </PSWriterProxy>
  </ProxyGroup>
</ServerManagerConfiguration>
